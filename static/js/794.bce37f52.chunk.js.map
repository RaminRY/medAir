{"version":3,"file":"static/js/794.bce37f52.chunk.js","mappings":"8SAKA,SAASA,IAEL,IAAAC,GAAuDC,EAAAA,EAAAA,UAAS,CAAC,yBAA0BC,EAAAA,GAAwB,CAC/GC,SAAS,IADCC,EAAgBJ,EAAtBK,KAAwBC,EAASN,EAATM,UAAWC,EAAOP,EAAPO,QAI3C,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHC,YAAU,EACVC,UAAQ,EACRC,QAASN,EACTO,QAASN,EAAQO,SAEA,OAAhBV,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBW,KAAI,SAACC,GACpB,OACIR,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAAuBQ,MAAOD,EAAEE,gBAAgBJ,SACzDE,EAAEE,iBADaF,EAAEG,cAI9B,KAGZ,CAEA,OAAeC,EAAAA,EAAAA,MAAKrB,GCvBpB,SAASsB,EAAwBC,GAE7B,IAAQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,kBAAmBC,EAASH,EAATG,KAErCC,GAAgCC,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMF,6BAA6B,IACvFG,GAAmCF,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMC,gCAAgC,IAC7FC,GAAoBH,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAME,iBAAiB,IAE/DC,EAAW,SAACC,GAEd,GADAF,GAAkB,GACdP,EAAgB,CAChB,IAAIU,EAAUP,EAA8BX,KAAI,SAACC,GAC7C,OAAIA,EAAEkB,KAAOF,EAAOE,GAAWF,EACnBhB,CAChB,IACAa,EAAiCI,EACrC,KAAO,CACH,IAAIC,GAAK,IAAIC,MAAOC,UACpBJ,EAAOE,GAAKA,EACZF,EAAOK,IAAMH,EACbL,EAAiC,GAADS,QAAAC,EAAAA,EAAAA,GAAKb,GAA6B,CAAEM,IACxE,CACAP,EAAKe,cACLhB,GACJ,EAOA,OACIiB,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAACC,QAAS,CAAC,IAAK,KAAK7B,SAAA,EAE5B2B,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CACDb,SAAUA,EACVG,GAAG,0BACHT,KAAMA,EACNoB,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZrC,SAAA,EAGFN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACQ,QAAM,EAACC,KAAK,KAAIvC,UACvBN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,OAGV9C,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,SAASF,KAAK,sBAAqBvC,UAChD2B,EAAAA,EAAAA,MAAChC,EAAAA,EAAM,CAACC,YAAU,EAAAI,SAAA,EACdN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,KAAIH,SAAC,aAC1BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,QAAOH,SAAC,WAC7BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,OAAMH,SAAC,UAC5BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,OAAMH,SAAC,UAC5BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,eAAcH,SAAC,2BACpCN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,eAAcH,SAAC,0BACpCN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,SAAQH,SAAC,kBAC9BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,SAAQH,SAAC,iBAC9BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,gBAAeH,SAAC,wBACrCN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,gBAAeH,SAAC,uBACrCN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,mBAAkBH,SAAC,6BAIhDN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CACNW,MAAM,sBACNF,KAAK,oBAAmBvC,UAExBN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,OAGV9C,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,aAAaF,KAAK,uBAAsBvC,UACrDN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAAA,SAAc,CAACE,WAAS,EAACC,UAAW,IAAMC,KAAM,UAKzDjB,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CACDb,SAAUA,EACVG,GAAG,0BACHT,KAAMA,EACNoB,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZrC,SAAA,EAGF2B,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAS,CAACW,MAAM,KAAIzC,SAAA,EACjBN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAACN,KAAK,QAAOvC,UAC3BN,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAW,CAAA9C,UACR2B,EAAAA,EAAAA,MAACoB,EAAAA,EAAK,CAACC,UAAU,WAAUhD,SAAA,EACvBN,EAAAA,EAAAA,KAACoD,EAAAA,GAAK,CAAC3C,MAAO,EAAEH,SAAC,cACjBN,EAAAA,EAAAA,KAACoD,EAAAA,GAAK,CAAC3C,MAAO,EAAEH,SAAC,qBAI7BN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CACNe,SAAO,EACPI,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWE,QAAUD,EAAcC,KAAK,EAACpD,SAErF,SAAAqD,GACG,OAA+B,KAA3BC,EADSD,EAAbC,eACkB,UAEV5D,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAACN,KAAK,MAAKvC,UACzBN,EAAAA,EAAAA,KAAC6D,EAAAA,EAAW,MAGV,EAClB,QAIR5B,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAS,CAACW,MAAM,KAAIzC,SAAA,EACjBN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAACN,KAAK,QAAOvC,UAC3BN,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAW,CAAA9C,UACR2B,EAAAA,EAAAA,MAACoB,EAAAA,EAAK,CAACC,UAAU,WAAUhD,SAAA,EACvBN,EAAAA,EAAAA,KAACoD,EAAAA,GAAK,CAAC3C,MAAO,EAAEH,SAAC,cACjBN,EAAAA,EAAAA,KAACoD,EAAAA,GAAK,CAAC3C,MAAO,EAAEH,SAAC,qBAI7BN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CACNe,SAAO,EACPI,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWM,QAAUL,EAAcK,KAAK,EAACxD,SAErF,SAAAyD,GACG,OAA+B,KAA3BH,EADSG,EAAbH,eACkB,UAEV5D,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAACN,KAAK,MAAKvC,UACzBN,EAAAA,EAAAA,KAAC6D,EAAAA,EAAW,MAGV,EAClB,QAIR5B,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAS,CAACW,MAAM,OAAMzC,SAAA,EACnBN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAACN,KAAK,OAAMvC,UAC1BN,EAAAA,EAAAA,KAAC6D,EAAAA,EAAW,CACRG,IAAK,EACLC,IAAK,EACLC,aAAc,OAGtBlE,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CACNe,SAAO,EACPI,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWW,OAASV,EAAcU,IAAI,EAAC7D,SAEnF,SAAA8D,GAAwB,IAOdC,EANP,OAA8B,KAA1BT,EADSQ,EAAbR,eACkB,SAEV5D,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAACN,KAAK,SAAQvC,UAC5BN,EAAAA,EAAAA,KAAC6D,EAAAA,EAAW,CAACS,YAAY,UAIf,QAAlBD,EAAApD,EAAKsD,qBAAa,IAAAF,GAAlBA,EAAAG,KAAAvD,EAAqB,CAACwD,OAAO,KACtB,GAEf,QAIRzE,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,MAAMF,KAAK,MAAKvC,UAC7BN,EAAAA,EAAAA,KAAC6D,EAAAA,EAAW,CAACG,IAAK,EAAGE,aAAc,OAGvClE,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,cAAcF,KAAK,cAAavC,UAC7CN,EAAAA,EAAAA,KAACT,EAAsB,OAG3BS,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACK,WAAY,CAAEiC,OAAQ,EAAGlC,KAAM,IAAKlC,UAC3C2B,EAAAA,EAAAA,MAACoB,EAAAA,EAAK,CAAA/C,SAAA,EAEFN,EAAAA,EAAAA,KAAC2E,EAAAA,GAAM,CACH1D,KAAK,0BACL2D,SAAS,SACTC,KAAK,UAASvE,SAEbS,EAAiB,OAAS,SAG/Bf,EAAAA,EAAAA,KAAC2E,EAAAA,GAAM,CAACG,QA3KR,WAChB7D,EAAKe,cACLhB,GACJ,EAwKkD+D,QAAM,EAAAzE,SAAES,EAAiB,QAAU,oBAWzF,CAEA,OAAeH,EAAAA,EAAAA,MAAKC,G,8ECtNPmE,EAA6B,CACtC,SACA,SACA,uBACA,uBACA,uBACA,uBACA,UACA,SACA,mBACA,mBACA,kBACA,mB,oGCiHJ,MAhHA,SAA+BlE,GAE3B,IAAQmE,EAAsFnE,EAAtFmE,OAAQC,EAA8EpE,EAA9EoE,QAASC,EAAqErE,EAArEqE,WAAYC,EAAyDtE,EAAzDsE,SAAUC,EAA+CvE,EAA/CuE,MAAOC,EAAwCxE,EAAxCwE,WAAYC,EAA4BzE,EAA5ByE,OAAQC,EAAoB1E,EAApB0E,UAAWvE,EAASH,EAATG,KAE/EK,GAAoBH,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAME,iBAAiB,IA0BrE,OAEIW,EAAAA,EAAAA,MAACwD,EAAAA,GAAK,CACFR,OAAQA,EACRC,QATY,WAChBjE,EAAKe,cACLkD,GACJ,EAOQQ,gBAAiBP,EACjBQ,cAAeP,EAAS9E,SAAA,EAExBN,EAAAA,EAAAA,KAAC4F,EAAAA,EAAY,KACb3D,EAAAA,EAAAA,MAAC4D,EAAAA,EAAY,CAAAvF,SAAA,EACTN,EAAAA,EAAAA,KAAC8F,EAAAA,EAAW,CAAAxF,SAAE+E,KACdrF,EAAAA,EAAAA,KAAC+F,EAAAA,EAAgB,KACjB/F,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAAA1F,UAGN2B,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CACDnB,KAAMA,EACNoB,WAAS,EACTC,WAAW,OACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KACZrC,SAAA,EAGFN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACQ,QAAM,EAACC,KAAK,KAAIvC,UACvBN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,OAGV9C,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACQ,QAAM,EAACC,KAAK,eAAcvC,UACjCN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,OAGV9C,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,SAASF,KAAK,qBAAoBvC,UAC/CN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CACFmD,IAAKd,EACLjF,YAAU,OAIlBF,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,qBAAqBF,KAAK,mBAAkBvC,UACzDN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CACF5C,YAAU,OAIlBF,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,qBAAqBF,KAAK,4BAA2BvC,UAClEN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CACF5C,YAAU,OAIlBF,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,cAAcF,KAAK,mBAAkBvC,UAClDN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAAA,SAAc,CAACE,WAAS,EAACC,UAAW,IACjCC,KAAM,YAQtBlD,EAAAA,EAAAA,KAACkG,EAAAA,EAAW,CAAA5F,UACRN,EAAAA,EAAAA,KAAC2E,EAAAA,GAAM,CACHE,KAAK,UACLsB,OAAK,EACLC,MAAMpG,EAAAA,EAAAA,KAACqG,EAAAA,EAAY,IACnBvB,QA9FH,WACbxD,GAAkB,GAClB,IACI,IAAME,EAASP,EAAKqF,iBACdC,GAAaC,EAAAA,EAAAA,GAAShF,GACxB+D,EACAD,EAAWiB,GAGXf,EAAUe,GAEdtF,EAAKe,aACT,CAAE,MAAOyE,GACLC,QAAQC,IAAI,WAAY,+BAAgCF,EAC5D,CACJ,EA+EsCnG,SAEjBiF,EAAS,OAAS,eAM3C,E,UCpHMqB,EAAgB,CAClB,UACA,SACA,mBACA,mBACA,kBACA,mBAGJ,SAASC,IACL,IAAAC,GAAoCC,EAAAA,EAAAA,KAA5B9B,EAAM6B,EAAN7B,OAAQ+B,EAAMF,EAANE,OAAQ9B,EAAO4B,EAAP5B,QAExB+B,GAAoDC,EAAAA,EAAAA,KAA5CC,EAAiBF,EAAjBE,kBAAmBC,EAAoBH,EAApBG,qBAErBjC,EAAakC,EAAAA,OAAa,MAC1BjC,EAAWiC,EAAAA,OAAa,MAE9BC,GAA4CC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GACxCI,GAAwCL,EAAAA,EAAAA,UAAS,CAAC,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAsCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElCG,EAAehG,EAAAA,EAAAA,UAARnB,GAAsBwG,EAAAA,EAAAA,GAAAW,EAAA,GAAlB,GA4CX,OACInG,EAAAA,EAAAA,MAAAoG,EAAAA,SAAA,CAAA/H,SAAA,EAEIN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACE,WAAW,OAAOS,MAAM,iBAAgBzC,UAC/C2B,EAAAA,EAAAA,MAACoB,EAAAA,EAAAA,QAAa,CAACX,MAAO,CAAE4F,MAAO,QAAShI,SAAA,EACpCN,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHsI,SAxCH,SAACC,GACdL,GAAe,GACfR,EAAkBa,EACtB,EAsCoBtI,YAAU,EACV+F,IAAKb,EAAS9E,SAEb0E,EAA2BzE,KAAI,SAAAC,GAC5B,OACIR,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAASQ,MAAOD,EAAEF,SAAEE,GAAdA,EAE5B,OAEJR,EAAAA,EAAAA,KAAC2E,EAAAA,GAAM,CAAC8D,UAAWf,EAAgB5C,QAzCnC,WACZ,GAAK4C,EAKD,GAFeP,EAAkBuB,MAAK,SAAClI,GAAC,OAAKA,EAAEmI,eAAiBjB,CAAc,IAKvE,GAAId,EAAcgC,SAASlB,GAAiB,CAC/C,IAAImB,EAAInB,EACJoB,EAAQhB,EAAaJ,IAAmB,EACxCqB,EAAoBF,EAAI,IAAMC,EAClCA,GAAS,EACTf,GAAeiB,EAAAA,EAAAA,GAAC,CAAC,EAAEtB,EAAiBoB,IACpCnB,EAAkBoB,GAClB/B,GACJ,MACImB,GAAe,QAXfR,EAAkBD,GAClBV,GAaZ,EAoBoE1G,UAACN,EAAAA,EAAAA,KAACqG,EAAAA,EAAY,WAIzE6B,IAAelI,EAAAA,EAAAA,KAACiJ,EAAAA,EAAK,CAClBC,UAAQ,EACRC,WAnDa,WACrBhB,GAAe,EACnB,EAkDYiB,QAAQ,uCAAuCvE,KAAK,UAIxD7E,EAAAA,EAAAA,KAACqJ,EAAqB,CAClBpE,OAAQA,EACRC,QAASA,EACTC,WAAYA,EACZC,SAAUA,EACVC,MAAOqC,EACPlC,UA3EM,SAAC8D,GACfA,EAAWX,aAAejB,EAC1B,IAAIhG,GAAK,IAAIC,MAAOC,UACpB0H,EAAWC,GAAK7H,EAChB0F,GAAqB,SAAAoC,GAAI,SAAA1H,QAAAC,EAAAA,EAAAA,GAAQyH,GAAI,CAAEF,GAAU,IACjDpE,GACJ,EAsEYjE,KAAMA,MAItB,CAEA,OAAeL,EAAAA,EAAAA,MAAKiG,GC3GpB,SAAS4C,IAEL,IAAAxC,GAAoDC,EAAAA,EAAAA,KAA5CC,EAAiBF,EAAjBE,kBAAmBC,EAAoBH,EAApBG,qBAE3BE,GAAgDC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnDoC,EAAgBlC,EAAA,GAAEmC,EAAmBnC,EAAA,GAE5CY,EAAehG,EAAAA,EAAAA,UAARnB,GAAsBwG,EAAAA,EAAAA,GAAAW,EAAA,GAAlB,GAEXtB,GAAoCC,EAAAA,EAAAA,KAA5B9B,EAAM6B,EAAN7B,OAAQ+B,EAAMF,EAANE,OAAQ9B,EAAO4B,EAAP5B,QAElBC,EAAakC,EAAAA,OAAa,MAC1BjC,EAAWiC,EAAAA,OAAa,MA0B9B,OACIpF,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAAA7C,SAAA,EAEdN,EAAAA,EAAAA,KAAC4J,EAAAA,GAAI,CACDC,KAAK,QACLC,QAAQ9J,EAAAA,EAAAA,KAAC6G,EAAuB,IAChCkD,UAAQ,EACRC,WAAY7C,EACZ8C,WAAY,SAACC,EAAMC,GACf,OACInK,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAEAtF,QAAS,kBAnCjB,SAACoF,GACbjJ,EAAKoJ,eAAeH,GACpBP,EAAoBO,GACpBlD,GACJ,CA+BuClC,CAAQoF,EAAK,EAC5BI,OAAQ,CAAEC,GAAI,YACdC,OAAO,UAASlK,UAEhBN,EAAAA,EAAAA,KAAC4J,EAAAA,GAAAA,KAAS,CAAAtJ,UACN2B,EAAAA,EAAAA,MAACwI,EAAAA,EAAI,CAACC,EAAE,OAAMpK,SAAA,EACV2B,EAAAA,EAAAA,MAACmI,EAAAA,GAAG,CAAA9J,SAAA,CAAE6J,EAAQ,EAAE,KAAGD,EAAKvB,iBACxB3I,EAAAA,EAAAA,KAAC2K,EAAAA,EAAM,KACP3K,EAAAA,EAAAA,KAAC4K,EAAAA,EAAU,CACPC,SAAO,EACPC,QAAQ,QACRC,WAAW,OACXlB,KAAK,KAAIvJ,UAETN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAACtF,QAAS,SAAC0D,GAAC,OAlC/B,SAACA,EAAE0B,GACpB1B,EAAEwC,iBACFxC,EAAEyC,kBACF,IAAMC,EAAU/D,EAAkBgE,QAAO,SAAA3K,GAAC,OAAIA,EAAE+I,KAAOW,EAAKX,EAAE,IAC9DnC,GAAoBrF,EAAAA,EAAAA,GAAKmJ,GAC7B,CA6ByDE,CAAa5C,EAAE0B,EAAK,EAAEmB,MAAM,WAAU/K,SAAC,cAfnE4J,EAAKX,GAqBtB,KAGJvJ,EAAAA,EAAAA,KAACqJ,EAAqB,CAClBpE,OAAQA,EACRC,QAASA,EACTC,WAAYA,EACZC,SAAUA,EACVC,MAAuB,OAAhBqE,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBf,aACzBpD,QAAQ,EACRD,WA3DO,SAACgE,GAChB,IAAM4B,EAAU/D,EAAkB5G,KAAI,SAAAC,GAClC,OAAIA,EAAE+I,KAAOD,EAAWC,GAAWD,EACvB9I,CAChB,IACA0E,IACAkC,GAAoBrF,EAAAA,EAAAA,GAAKmJ,GAC7B,EAqDYjK,KAAMA,MAKtB,CAEA,OAAeL,EAAAA,EAAAA,MAAK6I,GCvFpB,SAAS6B,IAEL,IAAQC,GAAuBrE,EAAAA,EAAAA,KAAvBqE,mBAEFC,GAAiBrK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMoK,cAAc,IAE/D,OACIvJ,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAACC,QAAS,CAAC,IAAK,KAAMsJ,IAAI,IAAGnL,SAAA,EAEpC2B,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CACDnB,KAAMsK,EACNlJ,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KAEd6I,eAAgBA,EAAelL,SAAA,EAG/BN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,YAAYF,KAAK,sBAAqBvC,UACnDN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAAA,SAAc,CAACE,WAAS,EAACC,UAAW,IAAMC,KAAM,OAGrDlD,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,qBAAqBF,KAAK,kBAAiBvC,UACxDN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAAA,SAAc,CAACE,WAAS,EAACC,UAAW,IAAMC,KAAM,OAGrDlD,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,oBAAoBF,KAAK,uBAAsBvC,UAC5DN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAAA,SAAc,CAACE,WAAS,EAACC,UAAW,IAAM/C,YAAU,EAACgD,KAAM,OAGhElD,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,mBAAmBF,KAAK,kBAAiBvC,UACtD2B,EAAAA,EAAAA,MAACmB,EAAAA,GAAAA,MAAW,CAAA9C,SAAA,EAERN,EAAAA,EAAAA,KAACoD,EAAAA,GAAK,CAAC3C,MAAO,EAAEH,SAAC,SACjBN,EAAAA,EAAAA,KAACoD,EAAAA,GAAK,CAAC3C,MAAO,EAAEH,SAAC,aAKzBN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CACNe,SAAO,EACPI,aAAc,SAACC,EAAYC,GAAa,OAAKD,EAAWkI,kBAAoBjI,EAAciI,eAAe,EAACpL,SAEzG,SAAAqD,GAAgB,OACwB,KAArCC,EADaD,EAAbC,eACc,oBACV5D,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,cAAcF,KAAK,kBAAiBvC,UACjDN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAAA,SAAc,CAACE,WAAS,EAACC,UAAW,QAEzC,EAAE,KAGdjD,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,YAAYF,KAAK,UAASvC,UACvC2B,EAAAA,EAAAA,MAAChC,EAAAA,EAAM,CAACC,YAAU,EAAAI,SAAA,EACdN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,QAAOH,SAAC,WAC7BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,OAAMH,SAAC,eAIpCN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,SAASF,KAAK,UAASvC,UACpC2B,EAAAA,EAAAA,MAAChC,EAAAA,EAAM,CAAAK,SAAA,EACHN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,QAAOH,SAAC,WAC7BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,OAAMH,SAAC,eAIpCN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,aAAaF,KAAK,kBAAiBvC,UAChD2B,EAAAA,EAAAA,MAAChC,EAAAA,EAAM,CAACC,YAAU,EAAAI,SAAA,EACdN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,QAAOH,SAAC,WAC7BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,OAAMH,SAAC,kBAOxCN,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CACDnB,KAAMsK,EACNlJ,WAAS,EACTC,WAAW,QACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,KAEd6I,eAAgBA,EAAelL,UAG/BN,EAAAA,EAAAA,KAACyJ,EAAiB,QAMlC,CAEA,OAAe7I,EAAAA,EAAAA,MAAK0K,G,6BC1GpB,SAASK,EAAehI,GAAwB,IAArBiI,EAAKjI,EAALiI,MAAOC,EAASlI,EAATkI,UAExBC,GAAYC,EAAAA,EAAAA,QAAO,MAEzB3D,EAAehG,EAAAA,EAAAA,UAARnB,GAAsBwG,EAAAA,EAAAA,GAAAW,EAAA,GAAlB,GAEL4D,GAAqB7K,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIA,EAAM4K,kBAAkB,IAC/DC,GAAwB9K,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIA,EAAM6K,qBAAqB,IAE3E3E,GAAwCC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7C4E,EAAY1E,EAAA,GAAE2E,EAAe3E,EAAA,IAGpC4E,EAAAA,EAAAA,YAAU,WACN,GAAIJ,EAAmBH,EAAY,QAAS,CACxC,IAAMQ,EAAML,EAAmBH,EAAY,QAC3CM,EAAgBG,KAAKC,MAAMF,GAC/B,CACJ,GAAG,IAEH,IAAAzE,GAAsCL,EAAAA,EAAAA,UAAS,SAAQM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhD4E,EAAW3E,EAAA,GAAE4E,EAAc5E,EAAA,GAClCG,GAA0CT,EAAAA,EAAAA,WAAS,GAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjD0E,EAAazE,EAAA,GAAE0E,EAAgB1E,EAAA,GACtC2E,GAAsCrF,EAAAA,EAAAA,UAAS,IAAGsF,GAAApF,EAAAA,EAAAA,GAAAmF,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAA4CzF,EAAAA,EAAAA,WAAS,GAAK0F,GAAAxF,EAAAA,EAAAA,GAAAuF,EAAA,GAAnDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAExCG,GAA8C7F,EAAAA,EAAAA,YAAU8F,GAAA5F,EAAAA,EAAAA,GAAA2F,EAAA,GAAjDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAA8CjG,EAAAA,EAAAA,YAAUkG,GAAAhG,EAAAA,EAAAA,GAAA+F,EAAA,GAAjDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,IA6C1CrB,EAAAA,EAAAA,YAAU,WACN,IAAIwB,EAAcC,IACdC,EAActB,EAAcoB,EAC5BG,OAAOC,OAAO9B,EAAc4B,GAC5B7M,EAAKoJ,eAAe,CAAE4D,YAAa/B,EAAa4B,KAEhD7M,EAAKoJ,eAAe,CAAE4D,YAAa,IAE3C,GAAG,CAACzB,IAEJ,IAOMqB,EAAyB,WAAO,IAADK,EAC7BN,EAAc,EACd/N,EAAOiM,EAAUqC,QAAQC,cAU7B,OARQ,QAARF,EADArO,EAAOA,EAAOyM,KAAKC,MAAM1M,GAAQ,UACzB,IAAAqO,GAAJA,EAAMG,MAAM,IACZxO,EAAKwO,MAAMC,SAAQ,SAAA9N,GACXA,EAAE+N,aAAe/B,IACjBoB,GAAe,EAEvB,IAGGA,GAA4B,CACvC,EAOMpC,GAAiBrK,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMoK,cAAc,IAgC/D,OANAY,EAAAA,EAAAA,YAAU,WACN,IAAIoC,EAAQC,YAAW,kBAVE,WACzB,IAAI5O,EAAOmM,GAAsBA,EAAmBH,EAAY,QAAUG,EAAmBH,EAAY,QAAU,GAE/GhM,IACAiM,EAAUqC,QAAQO,aAAa7O,GAC/B4O,YAAW,kBAAMtB,GAAkB,EAAK,GAAE,KAElD,CAGiCwB,EAAsB,GAAE,KACrD,OAAO,kBAAMC,aAAaJ,EAAM,CACpC,GAAG,CAAC1C,KAIA7J,EAAAA,EAAAA,MAACmI,EAAAA,GAAG,CAACG,GAAG,WAAWsE,EAAE,IAAIC,aAAa,OAAMxO,SAAA,EAExC2B,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CACDnB,KAAMA,EACNqB,WAAW,OACXI,MAAO,CAAE4F,MAAO,QAAShI,SAAA,EAGzB2B,EAAAA,EAAAA,MAACoB,EAAAA,EAAAA,QAAa,CAACiF,MAAM,OAAO5F,MAAO,CAAE4F,MAAO,OAAQyG,WAAY,UAAWzO,SAAA,EAEvEN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CACNM,MAAO,CAAE4F,MAAO,QAAShI,UAEzBN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACe,SAAO,EAACN,KAAK,cAAavC,UACjC2B,EAAAA,EAAAA,MAAChC,EAAAA,EAAM,CACH+O,SAAU,SAACxG,GAAC,OAAKiE,EAAejE,EAAE,EAClCtE,aAAa,QACb+K,YAAYjP,EAAAA,EAAAA,KAACkP,EAAAA,GAAM,CAACC,GAAG,IAAItF,KAAK,OAAOU,GAAIiC,IAC3C9J,MAAO,CAAE4F,MAAO,QAAShI,SAAA,EAEzBN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,QAAOH,SAAC,kBAC7BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,MAAKH,SAAC,mBAC3BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,QAAOH,SAAC,eAC7BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,OAAMH,SAAC,kBAC5BN,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,OAAa,CAACQ,MAAM,UAASH,SAAC,+BAK3CN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAAA9B,UACNN,EAAAA,EAAAA,KAAC2E,EAAAA,GAAM,CAACG,QApEV,WACdiI,EAAe,IACfJ,GAAiB,EACrB,EAiE+CrM,SAAC,YAEhCN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAAA9B,UACNN,EAAAA,EAAAA,KAAC2E,EAAAA,GAAM,CAAC8D,SAAUyE,EAAgBrI,KAAK,UAAUC,QAhElD,WACf0G,IACAuB,EAAe,GACfI,GAAkB,GAClBR,GAAiB,GACjB,IAAI9M,EAAOiM,EAAUqC,QAAQC,cAC7BpC,EAAmBH,EAAY,QAAUhM,EACzCmM,EAAmBH,EAAY,QAAUS,KAAK8C,UAAUlD,GACxDD,EAAsBD,EAC1B,EAuDyF1L,SAAC,YAE1EN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAAA9B,UACNN,EAAAA,EAAAA,KAAC2E,EAAAA,GAAM,CAACG,QAxDR,WAChBgH,EAAUqC,QAAQkB,MACtB,EAsDiD/O,SAAC,gBAKtCN,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,KAAS,CAACW,MAAM,cAAcF,KAAK,cAAavC,UAC7CN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAAA,SAAc,CACXE,WAAS,EACTC,UAAW,IACXsF,SAzGQ,SAACC,GACzB,IAAIoF,EAAcC,IAElB3B,EADYM,EAAcoB,GACJpF,EAAE8G,OAAO7O,MAC/B0L,EAAgBD,EACpB,UA0GQlM,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CACAM,EAAE,OACF6E,EAAE,OACFC,SAAS,WACTC,cAAc,OACdC,YAzKY,SAACC,GACrBpC,EAAmBoC,EAAMC,YAAYC,SACrClC,EAAmBgC,EAAMC,YAAYE,QACzC,EAuKYhL,QA5II,WACZ,GAAI4H,EAAe,CACf,IAAI7M,EAAOiM,EAAUqC,QAAQC,cACzB2B,EAAYzD,KAAKC,MAAM1M,GA5BDmQ,EA6BDD,EAAU1B,MA7BJ4B,EA6BW3C,EA7BR4C,EA6ByBxC,EA5B/DsC,EAAI1B,SAAQ,SAAC9N,EAAG2J,GACZ,IAAIgG,GAAO,EACX3P,EAAE4P,OAAO9B,SAAQ,SAAA+B,GACb,IAAIC,EAAMC,KAAKC,IAAIP,EAAIM,KAAKE,MAAMJ,EAAEJ,IAAM,GAE1C,IAAY,IADFM,KAAKC,IAAIN,EAAIK,KAAKE,MAAMJ,EAAEH,IAAM,KACd,IAARI,IAAiBH,EAAM,CACvCA,GAAO,EACP,IAAIO,EAAM,EACNC,EAAoB,GACxBX,EAAI1B,SAAQ,SAACsC,EAAGC,GACRD,EAAErC,aAAe/N,EAAE+N,aACnBmC,GAAO,EACPC,EAAkBG,KAAK,CAAEJ,IAAAA,EAAKvG,MAAO0G,IAE7C,IACA,IAAIE,EAASJ,EAAkBjI,MAAK,SAAAsI,GAAC,OAAIA,EAAE7G,QAAUA,CAAK,IACpD8D,EAAc/B,EAAa1L,EAAE+N,WAAawC,EAAOL,KACvDzP,EAAKoJ,eAAe,CAAE4D,YAAAA,IACtBxB,EAAejM,EAAE+N,WACrB,CACJ,GACJ,GAQA,CA9B6B,IAACyB,EAAKC,EAAGC,CA+B1C,EAsI6B5P,UAEjBN,EAAAA,EAAAA,KAACiR,EAAAA,EAAU,CACPvO,MAAO,CAAE8M,SAAU,WAAYlH,MAAO,OAAQ4I,OAAQ,QACtDC,OAAQvF,EACRwF,UAAU,cACV7C,WAAY/B,EACZvG,IAAK6F,EACLvD,SA5IO,WACnBtH,EAAKoJ,eAAe,CAAE4D,YAAa,KACnCd,GAAkB,EACtB,EA0IgB1E,SAAUiE,EACVI,YAAaA,QAOjC,CAEA,QAAelM,EAAAA,EAAAA,MAAK+K,G,mDC1NpB,SAAS0F,KAEL,OACIpP,EAAAA,EAAAA,MAACqP,EAAAA,EAAI,CACDC,aAAa,iBACbC,gBAAgB,iBAChB/F,IAAK,EACLqD,aAAa,OAAMxO,SAAA,EAEnBN,EAAAA,EAAAA,KAACyR,EAAAA,EAAQ,CAAC3C,aAAa,OAAO4C,QAAS,EAAGC,QAAS,CAAC,EAAG,EAAG,EAAG,GAAGrR,UAE5DN,EAAAA,EAAAA,KAAC4R,GAAM,CAAC/F,UAAU,gBAAgBD,MAAOA,QAK7C5L,EAAAA,EAAAA,KAACyR,EAAAA,EAAQ,CAAC3C,aAAa,OAAO6C,QAAS,CAAC,EAAG,EAAG,EAAG,GAAGrR,UAEhDN,EAAAA,EAAAA,KAAC4R,GAAM,CAAC/F,UAAU,gBAAgBD,MAAOA,QAI7C5L,EAAAA,EAAAA,KAACyR,EAAAA,EAAQ,CAAC3C,aAAa,OAAO6C,QAAS,CAAC,EAAG,EAAG,EAAG,GAAGrR,UAEhDN,EAAAA,EAAAA,KAAC4R,GAAM,CAAC/F,UAAU,gBAAgBD,MAAOA,SAOzD,CAEA,QAAehL,EAAAA,EAAAA,MAAKyQ,I,sDCnCpB,SAASQ,GAA4BlO,GAAkB,IAAhByH,EAAYzH,EAAZyH,aACrC,OACEpL,EAAAA,EAAAA,KAAC8R,GAAAA,EAAc,CAAChN,QAASsG,GAE7B,CAEA,QAAexK,EAAAA,EAAAA,MAAKiR,I,qBCHpB,SAASE,GAA0BpO,GAAe,IAAZxB,EAAOwB,EAAPxB,QAClCmF,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCrC,EAAMuC,EAAA,GAAEwK,EAASxK,EAAA,GAElByK,GAA6BC,EAAAA,EAAAA,IAAqB,SAAC9Q,GAAK,OAAKA,EAAM6Q,0BAA0B,IAC7FE,GAAgCD,EAAAA,EAAAA,IAAqB,SAAC9Q,GAAK,OAAKA,EAAM+Q,6BAA6B,IAEnGC,EAAmB,SAAC5J,GACtB,IAAI6J,EAAY7J,EAAE8G,OAAO5N,GACrB4Q,EAAY9J,EAAE8G,OAAOiD,QACnBC,GAAUhM,EAAAA,EAAAA,GAASyL,GACzBO,EAAQlE,SAAQ,SAAA9N,GACRA,EAAE6R,YAAcA,IAChB7R,EAAE8R,UAAYA,EAEtB,IACAH,GAA6BpQ,EAAAA,EAAAA,GAAKyQ,GACtC,GAEApG,EAAAA,EAAAA,YAAU,WACN,IAAIqG,EAAStQ,EAAQ5B,KAAI,SAAAwD,GAAmC,MAAQ,CAAElC,IAAvCkC,EAAHlC,IAA+CwQ,UAAjCtO,EAATsO,UAAqDC,UAAjCvO,EAATuO,UAAqDjN,MAArCtB,EAALsB,MAAiD,IACxG8M,EAA8BM,EAClC,GAAG,IAEH,IAAMC,GAAQC,EAAAA,EAAAA,UAAQ,WAclB,OAbYV,EACoB,OAA1BA,QAA0B,IAA1BA,OAA0B,EAA1BA,EAA4B1R,KAAI,SAAAC,GAAC,MAC/B,CACIuC,OAAO/C,EAAAA,EAAAA,KAAC4S,GAAAA,EAAQ,CACZlR,GAAK,OAADlB,QAAC,IAADA,OAAC,EAADA,EAAG6R,UACP9J,SAAU6J,EACVS,eAAiB,OAADrS,QAAC,IAADA,OAAC,EAADA,EAAG8R,UAAUhS,SAE5BE,EAAE6E,QAEV,IAEH,EAEV,GAAG,CAAC4M,IAMJ,OACIjS,EAAAA,EAAAA,KAAC8S,GAAAA,EAAY,CACTJ,MAAOA,EACPzN,OAAQA,EACR8N,aARa,SAACvK,GAClBwJ,EAAUxJ,EACd,GASJ,CAEA,QAAe5H,EAAAA,EAAAA,MAAKmR,ICpDpB,SAASiB,GAAoBlS,GAEzB,IAAQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,kBAAmBC,EAASH,EAATG,KAE3CgS,GAA0BC,EAAAA,GAAAA,GAAc,sBAAjCC,GAAsD1L,EAAAA,EAAAA,GAAAwL,EAAA,GAAvC,GAEhBhB,GAA6BC,EAAAA,EAAAA,IAAqB,SAAC9Q,GAAK,OAAKA,EAAM6Q,0BAA0B,IAE7F/Q,GAAgCC,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMF,6BAA6B,IACvFG,GAAmCF,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMC,gCAAgC,IAC7FC,GAAoBH,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAME,iBAAiB,IAE/D8R,EAAU,SAACf,GAAsC,IAA3BgB,IAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACtC,OAAiC,OAA1BrB,QAA0B,IAA1BA,GAAAA,EAA4BvJ,MAAK,SAAAlI,GAAC,OAAIA,EAAE6R,YAAcA,CAAS,IAAIJ,EAA2BvJ,MAAK,SAAAlI,GAAC,OAAIA,EAAE6R,YAAcA,CAAS,IAAEC,UAAYe,CAC1J,EAYMlR,GAAUwQ,EAAAA,EAAAA,UAAQ,WACpB,MAAO,CACH,CACItN,MAAO,SACPgN,UAAW,sBACXxQ,IAAK,sBACLyQ,UAAWc,EAAQ,uBACnBK,UAAU,EACVnL,OAAO6K,GAA0B,IACjCO,OAAQ,SAACjT,GAAK,OACVT,EAAAA,EAAAA,KAAC2T,GAAAA,EAAO,CAACC,UAAU,UAAUvO,MAAO5E,EAAMH,SACrCG,GACK,GAGlB,CACI4E,MAAO,sBACPgN,UAAW,oBACXxQ,IAAK,oBACLyQ,UAAWc,EAAQ,qBACnBK,UAAU,EACVnL,OAAO6K,GAA0B,IACjCO,OAAQ,SAACjT,GAAK,OACVT,EAAAA,EAAAA,KAAC2T,GAAAA,EAAO,CAACC,UAAU,UAAUvO,MAAO5E,EAAMH,SACrCG,GACK,GAGlB,CACI4E,MAAO,aACPgN,UAAW,uBACXxQ,IAAK,uBACLyQ,UAAWc,EAAQ,wBACnBK,UAAU,EACVnL,OAAO6K,GAA0B,IACjCO,OAAQ,SAACjT,GAAK,OACVT,EAAAA,EAAAA,KAAC2T,GAAAA,EAAO,CAACC,UAAU,UAAUvO,MAAO5E,EAAMH,SACrCG,GACK,GAGlB,CACI4E,MAAO,KACPgN,UAAW,MACXxQ,IAAK,MACLyQ,UAAWc,EAAQ,OACnBK,UAAU,EACVnL,OAAO6K,GAA0B,IACjCO,OAAQ,SAACjT,GACL,OAAIA,GAEIwB,EAAAA,EAAAA,MAACwI,EAAAA,EAAI,CAACoJ,eAAe,gBAAgBC,GAAG,IAAGxT,SAAA,EACvCN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAAA9J,SAAC,cACLN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAAC2J,GAAG,IAAI1I,MAAM,WAAWN,WAAW,WAAUzK,SAAEG,OAIrD,UAEf,GAEJ,CACI4E,MAAO,KACPgN,UAAW,MACXxQ,IAAK,MACLyQ,UAAWc,EAAQ,OACnBK,UAAU,EACVnL,OAAO6K,GAA0B,IACjCO,OAAQ,SAACjT,GACL,OAAIA,GAEIwB,EAAAA,EAAAA,MAACwI,EAAAA,EAAI,CAACoJ,eAAe,gBAAgBC,GAAG,IAAGxT,SAAA,EACvCN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAAA9J,SAAC,cACLN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAAC2J,GAAG,IAAI1I,MAAM,WAAWN,WAAW,WAAUzK,SAAEG,OAIrD,UAEf,GAEJ,CACI4E,MAAO,OACPgN,UAAW,OACXxQ,IAAK,OACLyQ,UAAWc,EAAQ,QACnBK,UAAU,EACVnL,OAAO6K,GAA0B,IACjCO,OAAQ,SAACjT,EAAOuT,GACZ,OAAe,KAAVvT,GAEGwB,EAAAA,EAAAA,MAACwI,EAAAA,EAAI,CAACoJ,eAAe,gBAAgBC,GAAG,IAAGxT,SAAA,EACvCN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAAA9J,SAAEG,KACNwB,EAAAA,EAAAA,MAACwI,EAAAA,EAAI,CAAAnK,SAAA,EACDN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAAA9J,SAAC,SACLN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAAC2J,GAAG,IAAI1I,MAAM,WAAWN,WAAW,WAAUzK,SAAE0T,EAAIvP,gBAMhEzE,EAAAA,EAAAA,KAAC2T,GAAAA,EAAO,CAACC,UAAU,UAAUvO,MAAO5E,EAAMH,SACrCG,GAIjB,GAEJ,CACI4E,MAAO,MACPgN,UAAW,MACXxQ,IAAK,MACLyQ,UAAWc,EAAQ,OACnBK,UAAU,EACVnL,OAAO6K,GAA0B,IACjCO,OAAQ,SAACjT,GAAK,OACVT,EAAAA,EAAAA,KAAC2T,GAAAA,EAAO,CAACC,UAAU,UAAUvO,MAAO5E,EAAMH,SACrCG,GACK,GAGlB,CACI4E,MAAO,SACPgN,UAAW,SACX/J,MAAO,GACPzG,IAAK,SACLyQ,UAAWc,EAAQ,UACnBK,UAAU,EACVQ,MAAO,SACPP,OAAQ,SAACjT,EAAOuT,EAAK7J,GAMjB,OACInK,EAAAA,EAAAA,KAAC6R,GAA4B,CAACzG,aANb,WACjB9J,GAAkB,GAClB,IAAIG,EAAUP,EAA8BiK,QAAO,SAAA3K,GAAC,OAAIA,EAAEkB,KAAOsS,EAAItS,EAAE,IACvEL,EAAiCI,EACrC,GAIJ,GAGZ,GAAG,CAAC0R,EAAiBlB,EAA4B/Q,IAEjD,OACIe,EAAAA,EAAAA,MAACmI,EAAAA,GAAG,CAAC8J,QAAQ,OAAOC,cAAc,SAAQ7T,SAAA,EAEtCN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAACgK,UAAU,WAAU9T,UACrBN,EAAAA,EAAAA,KAAC+R,GAA0B,CAAC5P,QAASA,OAGzCnC,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CACFxK,KAAK,QACLE,UAAQ,EACRuK,OAAQ,CACJrE,EAAGsE,OAAOC,aAEdC,YAAY,EACZtS,QAASA,EAAQgJ,QAAO,SAAA3K,GAAC,OAAoB,IAAhBA,EAAE8R,SAAkB,IACjDtI,WAAY9I,EACZwT,aAAc,SAACC,EAAQxK,GAAK,OACxBpJ,IAAmBoJ,EAAQ,EAAI,yBAA2B,EAAE,EAEhEyK,MAAO,SAACD,EAAQxK,GAAK,MAAM,CACvBrF,QAAS,SAAC0D,IA7KP,SAACmM,EAAQxK,GACxB,IAAQ0K,EAAaF,EAAbE,IAAKC,EAAQH,EAARG,IACTC,GAAWC,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GACRL,GAAM,IACTjR,MAAOmR,EAAM,EAAI,EACjB/Q,MAAOgR,EAAM,EAAI,IAErB7T,EAAKoJ,eAAe0K,EACxB,CAsKoBE,CAAWN,GACX3T,EAAkBmJ,EAAQ,EAC9B,EACH,MAKjB,CAEA,QAAevJ,EAAAA,EAAAA,MAAKoS,ICtMpB,SAASkC,KAEL,IAAA5N,GAA4CC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CvG,EAAcyG,EAAA,GAAExG,EAAiBwG,EAAA,GAExCY,EAAehG,EAAAA,EAAAA,UAARnB,GAAsBwG,EAAAA,EAAAA,GAAAW,EAAA,GAAlB,GAEX,OACInG,EAAAA,EAAAA,MAAAoG,EAAAA,SAAA,CAAA/H,SAAA,EACIN,EAAAA,EAAAA,KAACmV,EAAAA,EAAkB,KAEnBlT,EAAAA,EAAAA,MAACmI,EAAAA,GAAG,CAACyE,EAAE,IAAIuG,GAAG,IAAIC,UAAU,KAAK9K,GAAG,UAAUuE,aAAa,OAAMxO,SAAA,EAE7DN,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAACyE,EAAE,IAAIuG,GAAG,IAAIE,OAAO,iBAAiBxG,aAAa,OAAOvE,GAAIxJ,EAAiB,UAAY,GAAGT,UAE9FN,EAAAA,EAAAA,KAACa,EAAuB,CAACI,KAAMA,EAAMF,eAAgBA,EAAgBC,kBAAmBA,OAI5FhB,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAACyE,EAAE,IAAIuG,GAAG,IAAIE,OAAO,iBAAiBxG,aAAa,OAAMxO,UAEzDN,EAAAA,EAAAA,KAACgT,GAAmB,CAAC/R,KAAMA,EAAMF,eAAgBA,EAC7CC,kBAAmBA,UAM/BhB,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAACyE,EAAE,IAAIuG,GAAG,IAAIC,UAAU,KAAK9K,GAAG,UAAUuE,aAAa,OAAMxO,UAE7DN,EAAAA,EAAAA,KAACsL,EAAS,OAIdtL,EAAAA,EAAAA,KAACoK,EAAAA,GAAG,CAACyE,EAAE,IAAIuG,GAAG,IAAIC,UAAU,KAAK9K,GAAG,UAAUuE,aAAa,OAAMxO,UAE7DN,EAAAA,EAAAA,KAACqR,GAAW,QAK5B,CAEA,QAAezQ,EAAAA,EAAAA,MAAKsU,G","sources":["components/SelectInputs/PathologistSelectInput.js","pages/DiseaseHistory/modules/components/DiseaseHistoryFormBloke/index.js","modules/consts/familyMembersSelectOptions.js","pages/DiseaseHistory/modules/components/FamilyMembersList/ModalFamilyMemberForm.js","pages/DiseaseHistory/modules/components/FamilyMembersList/HeaderFamilyMembersList.js","pages/DiseaseHistory/modules/components/FamilyMembersList/index.js","pages/DiseaseHistory/modules/components/BlockForm/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/Canvas/index.js","pages/DiseaseHistory/modules/components/BlockCanvas/index.js","pages/DiseaseHistory/modules/components/DeleteDiseaseHistoryTableRow/index.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/DiseaseHistoryTableSetting.js","pages/DiseaseHistory/modules/components/DiseaseHistoryTable/index.js","pages/DiseaseHistory/index.js"],"sourcesContent":["import { Select } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { fetchPathologistsPlace } from '../../modules/api';\r\n\r\nfunction PathologistSelectInput() {\r\n\r\n    const { data: pathologistsList, isLoading, refetch } = useQuery([\"managers/pathologists\"], fetchPathologistsPlace, {\r\n        enabled: false,\r\n    })\r\n\r\n    return (\r\n        <Select\r\n            allowClear\r\n            lazyLoad\r\n            loading={isLoading}\r\n            onFocus={refetch}\r\n        >\r\n            {pathologistsList?.map((i) => {\r\n                return (\r\n                    <Select.Option key={i.pathologistId} value={i.pathologistName}>\r\n                        {i.pathologistName}\r\n                    </Select.Option>\r\n                );\r\n            })}\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default memo(PathologistSelectInput)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Button, Form, Input, InputNumber, Radio, Select, Space } from 'antd'\r\nimport React, { memo } from 'react'\r\nimport { useStore } from '../../../../../modules/store';\r\nimport { PathologistSelectInput } from '../../../../../components/SelectInputs';\r\n\r\nfunction DiseaseHistoryFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const onFinish = (values) => {\r\n        setIsFieldsChange(true)\r\n        if (selectedRowKey) {\r\n            let newData = dataSourceDiseaseHistoryTable.map((i) => {\r\n                if (i.id === values.id) return values\r\n                else return i\r\n            })\r\n            setDataSourceDiseaseHistoryTable(newData)\r\n        } else {\r\n            let id = new Date().getTime()\r\n            values.id = id\r\n            values.key = id\r\n            setDataSourceDiseaseHistoryTable([...dataSourceDiseaseHistoryTable, values])\r\n        }\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Breast\" name=\"complaintBreastType\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"no\">Missing</Select.Option>\r\n                        <Select.Option value=\"right\">Right</Select.Option>\r\n                        <Select.Option value=\"left\">Left</Select.Option>\r\n                        <Select.Option value=\"both\">Both</Select.Option>\r\n                        <Select.Option value=\"postmastektR\">Post mastectomy right</Select.Option>\r\n                        <Select.Option value=\"postmastektL\">Post mastectomy left</Select.Option>\r\n                        <Select.Option value=\"axilaR\">Axilla right</Select.Option>\r\n                        <Select.Option value=\"axilaL\">Axilla left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestR\">Extra breast right</Select.Option>\r\n                        <Select.Option value=\"anotherBrestL\">Extra breast left</Select.Option>\r\n                        <Select.Option value=\"anotherBrestBoth\">Both extra breasts</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Duration of illness\"\r\n                    name=\"durationOfIllness\"\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Complaints\" name=\"complaintDescription\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='diseaseHistoryFormBloke'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"ER\" >\r\n                    <Form.Item noStyle name=\"ihkEr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkEr !== currentValues.ihkEr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkEr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"erN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"PR\" >\r\n                    <Form.Item noStyle name=\"ihkPr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkPr !== currentValues.ihkPr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkPr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"prN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"HER2\" >\r\n                    <Form.Item noStyle name=\"her2\">\r\n                        <InputNumber\r\n                            min={0}\r\n                            max={3}\r\n                            defaultValue={0}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.her2 !== currentValues.her2}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('her2') === 2) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"her2FT\">\r\n                                        <InputNumber addonBefore=\"FT\" />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else {\r\n                                form.setFieldValue?.({her2FT:''})\r\n                                return ''\r\n                            }\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"K67\" name=\"k67\">\r\n                    <InputNumber min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n                    <PathologistSelectInput />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='diseaseHistoryFormBloke'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryFormBloke)","\r\n\r\nexport const familyMembersSelectOptions = [\r\n    'Mother',\r\n    'Father',\r\n    'Maternal grandmother',\r\n    'Paternal grandmother',\r\n    'Paternal grandfather',\r\n    'Maternal grandfather',\r\n    'Brother',\r\n    'Sister',\r\n    \"Father's brother\",\r\n    \"Mother's brother\",\r\n    \"Father's sister\",\r\n    \"Mother's sister\",\r\n]","import React from 'react'\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from '@chakra-ui/react'\r\nimport { Button, Form, Input } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy'\r\nimport { useStore } from '../../../../../modules/store'\r\n\r\nfunction ModalFamilyMemberForm(props) {\r\n\r\n    const { isOpen, onClose, initialRef, finalRef, title, handleEdit, isEdit, handleAdd, form } = props\r\n\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n\r\n\r\n    const onFinish = () => {\r\n        setIsFieldsChange(true)\r\n        try {\r\n            const values = form.getFieldsValue()\r\n            const copyValues = deepCopy(values)\r\n            if (isEdit) {\r\n                handleEdit(copyValues)\r\n            }\r\n            else {\r\n                handleAdd(copyValues)\r\n            }\r\n            form.resetFields()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        form.resetFields()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal\r\n            isOpen={isOpen}\r\n            onClose={handleClose}\r\n            initialFocusRef={initialRef}\r\n            finalFocusRef={finalRef}\r\n        >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>{title}</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n\r\n\r\n                    <Form\r\n                        form={form}\r\n                        labelWrap\r\n                        labelAlign=\"left\"\r\n                        labelCol={{\r\n                            span: 8,\r\n                        }}\r\n                        wrapperCol={{\r\n                            span: 16,\r\n                        }}\r\n                        style={{\r\n                            maxWidth: 600,\r\n                        }}\r\n                    >\r\n\r\n                        <Form.Item hidden name=\"Id\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item hidden name=\"familyMember\">\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Trauma\" name=\"familyMemberInjury\">\r\n                            <Input\r\n                                ref={initialRef}\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Deceased of cancer\" name=\"familyMemberDied\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Living with cancer\" name=\"familyMemberCurrentCancer\">\r\n                            <Input\r\n                                allowClear\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Description\" name=\"familyMemberDesc\">\r\n                            <Input.TextArea showCount maxLength={3000}\r\n                                rows={3}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button\r\n                        type='primary'\r\n                        block\r\n                        icon={<PlusOutlined />}\r\n                        onClick={onFinish}\r\n                    >\r\n                        {isEdit ? 'Edit' : 'Add'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalFamilyMemberForm","import React, { memo, useState } from 'react'\r\nimport { familyMembersSelectOptions } from '../../../../../modules/consts'\r\nimport { Alert, Button, Form, Select, Space } from 'antd'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { useDisclosure } from '@chakra-ui/react'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\n\r\nconst arrSeveralAdd = [\r\n    \"Brother\",\r\n    \"Sister\",\r\n    \"Father's-brother\",\r\n    \"Mother's-brother\",\r\n    \"Father's-sister\",\r\n    \"Mother's-sister\",\r\n];\r\n\r\nfunction HeaderFamilyMembersList() {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n    const [selectedMember, setSelectedMember] = useState()\r\n    const [countAddedFM, setCountAddedFM] = useState({});\r\n    const [isShowAlert, setIsShowAlert] = useState(false)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const handleAdd = (memberData) => {\r\n        memberData.familyMember = selectedMember\r\n        let id = new Date().getTime()\r\n        memberData.Id = id\r\n        setFamilyMembersList(prev => [...prev, memberData])\r\n        onClose()\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setIsShowAlert(false)\r\n        setSelectedMember(e)\r\n    }\r\n\r\n    const handleCloseAlert = () => {\r\n        setIsShowAlert(false)\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (!selectedMember) {\r\n            return\r\n        } else {\r\n            const findEl = familyMembersList.find((i) => i.familyMember === selectedMember)\r\n\r\n            if (!findEl) {\r\n                setSelectedMember(selectedMember)\r\n                onOpen()\r\n            } else if (arrSeveralAdd.includes(selectedMember)) {\r\n                let s = selectedMember;\r\n                let count = countAddedFM[selectedMember] || 2;\r\n                let newSelectedMember = s + \"_\" + count;\r\n                count += 1;\r\n                setCountAddedFM({ [selectedMember]: count });\r\n                setSelectedMember(newSelectedMember)\r\n                onOpen()\r\n            } else {\r\n                setIsShowAlert(true)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Form.Item labelAlign='left' label=\"Family members\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                    <Select\r\n                        onChange={onChange}\r\n                        allowClear\r\n                        ref={finalRef}\r\n                    >\r\n                        {familyMembersSelectOptions.map(i => {\r\n                            return (\r\n                                <Select.Option key={i} value={i}>{i}</Select.Option>\r\n                            )\r\n                        })}\r\n                    </Select>\r\n                    <Button disabled={!selectedMember} onClick={onClick}><PlusOutlined /></Button>\r\n                </Space.Compact>\r\n            </Form.Item>\r\n\r\n            {isShowAlert && <Alert\r\n                closable\r\n                afterClose={handleCloseAlert} \r\n                message=\"Selected family member already added\" type=\"info\"\r\n\r\n            />}\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedMember}\r\n                handleAdd={handleAdd}\r\n                form={form}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(HeaderFamilyMembersList)","import React, { memo, useState } from 'react'\r\nimport { Form, List } from 'antd'\r\nimport { Box, Flex, IconButton, Spacer, useDisclosure } from '@chakra-ui/react'\r\nimport HeaderFamilyMembersList from './HeaderFamilyMembersList'\r\nimport ModalFamilyMemberForm from './ModalFamilyMemberForm'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\nfunction FamilyMembersList() {\r\n\r\n    const { familyMembersList, setFamilyMembersList } = useGlobalContext()\r\n\r\n    const [selectedListItem, setSelectedListItem] = useState()\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const initialRef = React.useRef(null)\r\n    const finalRef = React.useRef(null)\r\n\r\n\r\n    const onClick = (item) => {\r\n        form.setFieldsValue(item)\r\n        setSelectedListItem(item)\r\n        onOpen()\r\n    }\r\n\r\n    const handleEdit = (memberData) => {\r\n        const newList = familyMembersList.map(i => {\r\n            if (i.Id === memberData.Id) return memberData\r\n            else return i\r\n        })\r\n        onClose()\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n    const handleDelete = (e,item) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const newList = familyMembersList.filter(i => i.Id !== item.Id)\r\n        setFamilyMembersList([...newList])\r\n    }\r\n\r\n\r\n    return (\r\n        <Form.Item noStyle >\r\n\r\n            <List\r\n                size=\"small\"\r\n                header={<HeaderFamilyMembersList />}\r\n                bordered\r\n                dataSource={familyMembersList}\r\n                renderItem={(item, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={item.Id}\r\n                            onClick={() => onClick(item)}\r\n                            _hover={{ bg: 'pink.200' }}\r\n                            cursor='pointer'\r\n                        >\r\n                            <List.Item>\r\n                                <Flex w='100%'>\r\n                                    <Box>{index + 1}. {item.familyMember}</Box>\r\n                                    <Spacer />\r\n                                    <IconButton\r\n                                        isRound\r\n                                        variant='ghost'\r\n                                        fontWeight='bold'\r\n                                        size='xs'\r\n                                    >\r\n                                        <Box onClick={(e) => handleDelete(e,item)} color='pink.500'>X</Box>\r\n                                    </IconButton>\r\n                                </Flex>\r\n                            </List.Item>\r\n                        </Box>\r\n                    )\r\n                }}\r\n            />\r\n\r\n            <ModalFamilyMemberForm\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                initialRef={initialRef}\r\n                finalRef={finalRef}\r\n                title={selectedListItem?.familyMember}\r\n                isEdit={true}\r\n                handleEdit={handleEdit}\r\n                form={form}\r\n            />\r\n\r\n        </Form.Item>\r\n    )\r\n}\r\n\r\nexport default memo(FamilyMembersList)","import { SimpleGrid } from '@chakra-ui/react'\r\nimport { Input, Radio, Select, Form } from 'antd';\r\nimport React, { memo } from 'react'\r\nimport FamilyMembersList from '../FamilyMembersList';\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js';\r\nimport { useStore } from '../../../../../modules/store';\r\n\r\nfunction BlockForm() {\r\n\r\n    const { diseaseHistoryForm } = useGlobalContext()\r\n\r\n    const onFieldsChange = useStore((store) => store.onFieldsChange)\r\n\r\n    return (\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n\r\n                <Form.Item label=\"Allergies\" name=\"allergyAvailability\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Receved treatement\" name=\"medicationTaken\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Initial diagnosis\" name=\"preliminaryDiagnosis\">\r\n                    <Input.TextArea showCount maxLength={3000} allowClear rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Received traumas\" name=\"receivedTraumas\">\r\n                    <Radio.Group\r\n                    >\r\n                        <Radio value={1}>Yes</Radio>\r\n                        <Radio value={2}>No</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.receivedTraumas !== currentValues.receivedTraumas}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('receivedTraumas') === 1 ? (\r\n                            <Form.Item label=\"Description\" name=\"ownInjuryReason\">\r\n                                <Input.TextArea showCount maxLength={3000} />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant\" name=\"maliqan\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Benign\" name=\"beniqen\">\r\n                    <Select>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Malignant?\" name=\"maliqanQuestion\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n\r\n            <Form\r\n                form={diseaseHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n\r\n                <FamilyMembersList />\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(BlockForm)\r\n\r\n\r\n\r\n","import { Box, Circle } from '@chakra-ui/react'\r\nimport { Button, Form, Input, Select, Space } from 'antd'\r\nimport React, { memo, useEffect, useRef, useState } from 'react'\r\nimport CanvasDraw from 'react-canvas-draw'\r\nimport { useStore } from '../../../../../../modules/store'\r\n\r\n\r\nfunction CanvasComponent({ image, imageName }) {\r\n\r\n    const canvasRef = useRef(null);\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const savedDrawingCanvas = useStore(store => store.savedDrawingCanvas)\r\n    const setSavedDrawingCanvas = useStore(store => store.setSavedDrawingCanvas)\r\n\r\n    const [descriptions, setDescriptions] = useState({})\r\n\r\n\r\n    useEffect(() => {\r\n        if (savedDrawingCanvas[imageName + \"Desc\"]) {\r\n            const str = savedDrawingCanvas[imageName + \"Desc\"]\r\n            setDescriptions(JSON.parse(str))\r\n        }\r\n    }, [])\r\n\r\n    const [colorCanvas, setColorCanvas] = useState('green')\r\n    const [disableCanvas, setDisableCanvas] = useState(true);\r\n    const [brushRadius, setBrushRadius] = useState(20);\r\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\r\n\r\n    const [X_PositionMouse, setX_PositionMouse] = useState()\r\n    const [Y_PositionMouse, setY_PositionMouse] = useState()\r\n\r\n    const handleMouseMove = (event) => {\r\n        setX_PositionMouse(event.nativeEvent.offsetX);\r\n        setY_PositionMouse(event.nativeEvent.offsetY);\r\n    };\r\n\r\n    const getDescriptionPointColor = (arr, x, y) => {\r\n        arr.forEach((i, index) => {\r\n            let isIf = false\r\n            i.points.forEach(c => {\r\n                let isX = Math.abs(x - Math.round(c.x)) < 15\r\n                let isY = Math.abs(y - Math.round(c.y)) < 15\r\n                if (isY === true && isX === true && !isIf) {\r\n                    isIf = true\r\n                    let num = 0\r\n                    let arrSelectedColors = []\r\n                    arr.forEach((d, indexD) => {\r\n                        if (d.brushColor === i.brushColor) {\r\n                            num += 1\r\n                            arrSelectedColors.push({ num, index: indexD })\r\n                        }\r\n                    })\r\n                    let findEl = arrSelectedColors.find(f => f.index === index)\r\n                    const description = descriptions[i.brushColor + findEl.num]\r\n                    form.setFieldsValue({ description })\r\n                    setColorCanvas(i.brushColor)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (disableCanvas) {\r\n            let data = canvasRef.current.getSaveData();\r\n            let dataParse = JSON.parse(data)\r\n            getDescriptionPointColor(dataParse.lines, X_PositionMouse, Y_PositionMouse)\r\n        }\r\n    };\r\n\r\n    const onChangeCanvas = () => {\r\n        form.setFieldsValue({ description: '' })\r\n        setDisableSaveBtn(false)\r\n    };\r\n\r\n    useEffect(() => {\r\n        let colorNumber = computationColorNumber()\r\n        let objProperty = colorCanvas + colorNumber;\r\n        if (Object.hasOwn(descriptions, objProperty)) {\r\n            form.setFieldsValue({ description: descriptions[objProperty] })\r\n        } else {\r\n            form.setFieldsValue({ description: '' })\r\n        }\r\n    }, [colorCanvas]);\r\n\r\n    const onChangeDescription = (e) => {\r\n        let colorNumber = computationColorNumber()\r\n        let param = colorCanvas + colorNumber;\r\n        descriptions[param] = e.target.value;\r\n        setDescriptions(descriptions);\r\n    };\r\n\r\n    const computationColorNumber = () => {\r\n        let colorNumber = 0\r\n        let data = canvasRef.current.getSaveData();\r\n        data = data ? JSON.parse(data) : ''\r\n        if (data?.lines[0]) {\r\n            data.lines.forEach(i => {\r\n                if (i.brushColor === colorCanvas) {\r\n                    colorNumber += 1\r\n                }\r\n            })\r\n        }\r\n\r\n        return colorNumber ? colorNumber : 1\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        setBrushRadius(20);\r\n        setDisableCanvas(false);\r\n    };\r\n\r\n    const onFieldsChange = useStore((store) => store.onFieldsChange)\r\n    \r\n    const handleSave = () => {\r\n        onFieldsChange()\r\n        setBrushRadius(0);\r\n        setDisableSaveBtn(true);\r\n        setDisableCanvas(true);\r\n        let data = canvasRef.current.getSaveData();\r\n        savedDrawingCanvas[imageName + 'Data'] = data;\r\n        savedDrawingCanvas[imageName + 'Desc'] = JSON.stringify(descriptions);\r\n        setSavedDrawingCanvas(savedDrawingCanvas);\r\n    };\r\n\r\n    const handleClear = () => {\r\n        canvasRef.current.undo();\r\n    };\r\n\r\n    const handleRestoreDrawing = () => {\r\n        let data = savedDrawingCanvas && savedDrawingCanvas[imageName + 'Data'] ? savedDrawingCanvas[imageName + 'Data'] : \"\"\r\n\r\n        if (data) {\r\n            canvasRef.current.loadSaveData(data);\r\n            setTimeout(() => setDisableSaveBtn(true), 100)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let timer = setTimeout(() => handleRestoreDrawing(), 1000)\r\n        return () => clearTimeout(timer)\r\n    }, [canvasRef])\r\n\r\n\r\n    return (\r\n        <Box bg='pink.100' p='1' borderRadius='10px'>\r\n\r\n            <Form\r\n                form={form}\r\n                labelAlign='left'\r\n                style={{ width: '100%' }}\r\n            >\r\n\r\n                <Space.Compact width='100%' style={{ width: \"100%\", alignItems: 'center' }}>\r\n\r\n                    <Form.Item\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        <Form.Item noStyle name=\"colorCanvas\">\r\n                            <Select\r\n                                onSelect={(e) => setColorCanvas(e)}\r\n                                defaultValue='green'\r\n                                suffixIcon={<Circle mr='4' size='20px' bg={colorCanvas} />}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <Select.Option value=\"green\">Benign tumor</Select.Option>\r\n                                <Select.Option value=\"red\">Maligan tumor</Select.Option>\r\n                                <Select.Option value=\"black\">Maligan ?</Select.Option>\r\n                                <Select.Option value=\"blue\">My operation</Select.Option>\r\n                                <Select.Option value=\"#AA00FF\">Operated not by me</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button onClick={handleAdd}>Edit</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button disabled={disableSaveBtn} type='primary' onClick={handleSave}>Save</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button onClick={handleClear}>Clear</Button>\r\n                    </Form.Item>\r\n\r\n                </Space.Compact>\r\n\r\n                <Form.Item label='Description' name='description'>\r\n                    <Input.TextArea\r\n                        showCount\r\n                        maxLength={3000}\r\n                        onChange={onChangeDescription}\r\n                    />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Box\r\n                w=\"100%\"\r\n                h=\"100%\"\r\n                position=\"relative\"\r\n                paddingBottom=\"100%\"\r\n                onMouseMove={handleMouseMove}\r\n                onClick={onClick}\r\n            >\r\n                <CanvasDraw\r\n                    style={{ position: 'absolute', width: '100%', height: '100%' }}\r\n                    imgSrc={image}\r\n                    className=\"canvas-draw\"\r\n                    brushColor={colorCanvas}\r\n                    ref={canvasRef}\r\n                    onChange={onChangeCanvas}\r\n                    disabled={disableCanvas}\r\n                    brushRadius={brushRadius}\r\n\r\n                />\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(CanvasComponent)","import { Grid, GridItem } from '@chakra-ui/react'\r\nimport React, { memo } from 'react'\r\nimport Canvas from './Canvas'\r\nimport image from '../../../../../modules/images/man.png'\r\n\r\nfunction BlockCanvas() {\r\n\r\n    return (\r\n        <Grid\r\n            templateRows='repeat(2, 1fr)'\r\n            templateColumns='repeat(5, 1fr)'\r\n            gap={4}\r\n            borderRadius='10px'\r\n        >\r\n            <GridItem borderRadius='10px' rowSpan={2} colSpan={[5, 5, 5, 3]} >\r\n\r\n                <Canvas imageName='deseaseImage1' image={image} />\r\n\r\n            </GridItem>\r\n\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]} >\r\n\r\n                <Canvas imageName='deseaseImage2' image={image} />\r\n\r\n            </GridItem>\r\n\r\n            <GridItem borderRadius='10px' colSpan={[5, 5, 5, 2]}>\r\n\r\n                <Canvas imageName='deseaseImage3' image={image} />\r\n\r\n            </GridItem>\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(BlockCanvas)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteDiseaseHistoryTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteDiseaseHistoryTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction DiseaseHistoryTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n    const setDiseaseHistoryTableSetting = useLocalStorageStore((store) => store.setDiseaseHistoryTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(diseaseHistoryTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setDiseaseHistoryTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setDiseaseHistoryTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = diseaseHistoryTableSetting\r\n            ? diseaseHistoryTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [diseaseHistoryTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTableSetting)","import { Box, Flex, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport DeleteDiseaseHistoryTableRow from '../DeleteDiseaseHistoryTableRow';\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport DiseaseHistoryTableSetting from './DiseaseHistoryTableSetting';\r\n\r\nfunction DiseaseHistoryTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const diseaseHistoryTableSetting = useLocalStorageStore((store) => store.diseaseHistoryTableSetting)\r\n\r\n    const dataSourceDiseaseHistoryTable = useStore((store) => store.dataSourceDiseaseHistoryTable)\r\n    const setDataSourceDiseaseHistoryTable = useStore((store) => store.setDataSourceDiseaseHistoryTable)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return diseaseHistoryTableSetting?.find(i => i.dataIndex === dataIndex) ? diseaseHistoryTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const { erN, prN } = record\r\n        let initialForm = {\r\n            ...record,\r\n            ihkEr: erN ? 1 : 2,\r\n            ihkPr: prN ? 1 : 2,\r\n        }\r\n        form.setFieldsValue(initialForm)\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast\",\r\n                dataIndex: \"complaintBreastType\",\r\n                key: \"complaintBreastType\",\r\n                isVisible: visible('complaintBreastType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Duration of illness\",\r\n                dataIndex: \"durationOfIllness\",\r\n                key: \"durationOfIllness\",\r\n                isVisible: visible('durationOfIllness'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Complaints\",\r\n                dataIndex: \"complaintDescription\",\r\n                key: \"complaintDescription\",\r\n                isVisible: visible('complaintDescription'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n                isVisible: visible('erN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n                isVisible: visible('prN'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n                isVisible: visible('her2'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value, row) => {\r\n                    if (+value === 2) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>{value}</Box>\r\n                                <Flex>\r\n                                    <Box>FT:</Box>\r\n                                    <Box ml='2' color='blue.400' fontWeight='semibold'>{row.her2FT}</Box>\r\n                                </Flex>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <Tooltip placement=\"topLeft\" title={value}>\r\n                                {value}\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n                isVisible: visible('k67'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        setIsFieldsChange(true)\r\n                        let newData = dataSourceDiseaseHistoryTable.filter(i => i.id !== row.id)\r\n                        setDataSourceDiseaseHistoryTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteDiseaseHistoryTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, diseaseHistoryTableSetting, dataSourceDiseaseHistoryTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <DiseaseHistoryTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceDiseaseHistoryTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistoryTable)","import React, { memo, useState } from 'react'\r\nimport DiseaseHistoryFormBloke from './modules/components/DiseaseHistoryFormBloke'\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm'\r\nimport BlockForm from './modules/components/BlockForm'\r\nimport BlockCanvas from './modules/components/BlockCanvas'\r\nimport { Box } from '@chakra-ui/react'\r\nimport DiseaseHistoryTable from './modules/components/DiseaseHistoryTable'\r\nimport { Form } from 'antd'\r\n\r\nfunction DiseaseHistory() {\r\n\r\n    const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    return (\r\n        <>\r\n            <ProfilePatientForm />\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n                    <DiseaseHistoryFormBloke form={form} selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n                <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n                    <DiseaseHistoryTable form={form} selectedRowKey={selectedRowKey}\r\n                        setSelectedRowKey={setSelectedRowKey} />\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockForm />\r\n\r\n            </Box>\r\n\r\n            <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n                <BlockCanvas />\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(DiseaseHistory)"],"names":["PathologistSelectInput","_useQuery","useQuery","fetchPathologistsPlace","enabled","pathologistsList","data","isLoading","refetch","_jsx","Select","allowClear","lazyLoad","loading","onFocus","children","map","i","value","pathologistName","pathologistId","memo","DiseaseHistoryFormBloke","props","selectedRowKey","setSelectedRowKey","form","dataSourceDiseaseHistoryTable","useStore","store","setDataSourceDiseaseHistoryTable","setIsFieldsChange","onFinish","values","newData","id","Date","getTime","key","concat","_toConsumableArray","resetFields","_jsxs","SimpleGrid","columns","Form","labelWrap","labelAlign","labelCol","span","wrapperCol","style","maxWidth","hidden","name","Input","label","showCount","maxLength","rows","noStyle","Radio","Space","direction","shouldUpdate","prevValues","currentValues","ihkEr","_ref","getFieldValue","InputNumber","ihkPr","_ref2","min","max","defaultValue","her2","_ref3","_form$setFieldValue","addonBefore","setFieldValue","call","her2FT","offset","Button","htmlType","type","onClick","danger","familyMembersSelectOptions","isOpen","onClose","initialRef","finalRef","title","handleEdit","isEdit","handleAdd","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ref","ModalFooter","block","icon","PlusOutlined","getFieldsValue","copyValues","deepCopy","error","console","log","arrSeveralAdd","HeaderFamilyMembersList","_useDisclosure","useDisclosure","onOpen","_useGlobalContext","useGlobalContext","familyMembersList","setFamilyMembersList","React","_useState","useState","_useState2","_slicedToArray","selectedMember","setSelectedMember","_useState3","_useState4","countAddedFM","setCountAddedFM","_useState5","_useState6","isShowAlert","setIsShowAlert","_Form$useForm","_Fragment","width","onChange","e","disabled","find","familyMember","includes","s","count","newSelectedMember","_defineProperty","Alert","closable","afterClose","message","ModalFamilyMemberForm","memberData","Id","prev","FamilyMembersList","selectedListItem","setSelectedListItem","List","size","header","bordered","dataSource","renderItem","item","index","Box","setFieldsValue","_hover","bg","cursor","Flex","w","Spacer","IconButton","isRound","variant","fontWeight","preventDefault","stopPropagation","newList","filter","handleDelete","color","BlockForm","diseaseHistoryForm","onFieldsChange","gap","receivedTraumas","CanvasComponent","image","imageName","canvasRef","useRef","savedDrawingCanvas","setSavedDrawingCanvas","descriptions","setDescriptions","useEffect","str","JSON","parse","colorCanvas","setColorCanvas","disableCanvas","setDisableCanvas","_useState7","_useState8","brushRadius","setBrushRadius","_useState9","_useState10","disableSaveBtn","setDisableSaveBtn","_useState11","_useState12","X_PositionMouse","setX_PositionMouse","_useState13","_useState14","Y_PositionMouse","setY_PositionMouse","colorNumber","computationColorNumber","objProperty","Object","hasOwn","description","_data","current","getSaveData","lines","forEach","brushColor","timer","setTimeout","loadSaveData","handleRestoreDrawing","clearTimeout","p","borderRadius","alignItems","onSelect","suffixIcon","Circle","mr","stringify","undo","target","h","position","paddingBottom","onMouseMove","event","nativeEvent","offsetX","offsetY","dataParse","arr","x","y","isIf","points","c","isX","Math","abs","round","num","arrSelectedColors","d","indexD","push","findEl","f","CanvasDraw","height","imgSrc","className","BlockCanvas","Grid","templateRows","templateColumns","GridItem","rowSpan","colSpan","Canvas","DeleteDiseaseHistoryTableRow","DeleteTableRow","DiseaseHistoryTableSetting","setIsOpen","diseaseHistoryTableSetting","useLocalStorageStore","setDiseaseHistoryTableSetting","onChangeCheckbox","dataIndex","isVisible","checked","copyCTS","colArr","items","useMemo","Checkbox","defaultChecked","TableSetting","onOpenChange","DiseaseHistoryTable","_useMediaQuery","useMediaQuery","isLargerThan400","visible","defaultVisible","arguments","length","undefined","ellipsis","render","Tooltip","placement","justifyContent","pr","ml","row","align","display","flexDirection","alignSelf","Table","scroll","window","innerHeight","pagination","rowClassName","record","onRow","erN","prN","initialForm","_objectSpread","onRowTable","DiseaseHistory","ProfilePatientForm","my","boxShadow","border"],"sourceRoot":""}