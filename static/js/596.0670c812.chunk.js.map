{"version":3,"file":"static/js/596.0670c812.chunk.js","mappings":"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","sources":["components/EditTableComponent/modules/components/UseTabs.js","components/EditTableComponent/modules/components/CureTabType.js","components/EditTableComponent/modules/components/InputComponent.js","components/EditTableComponent/modules/components/EditInputType.js","components/EditTableComponent/modules/hooks/useChildrenNode.js","components/EditTableComponent/index.js","pages/Treatment/modules/components/TreatmentFormBloke/index.js","pages/Treatment/modules/components/TreatmentTableFormBloke/index.js","pages/Treatment/modules/components/DeleteTreatmentTableRow/index.js","pages/Treatment/modules/components/TreatmentTable/TreatmentTableTableSetting.js","pages/Treatment/modules/components/TreatmentTable/index.js","pages/Treatment/modules/components/DeleteTreatmentMedicationsTableRow/index.js","../node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs","pages/Treatment/modules/components/TreatmentMedicationsTable/TreatmentMedicationsTableSetting.js","pages/Treatment/modules/components/TreatmentMedicationsTable/index.js","pages/Treatment/index.js","../node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js","../node_modules/@ant-design/icons/es/icons/PlusOutlined.js","../node_modules/@chakra-ui/layout/dist/chunk-6FWJQRCB.mjs","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import { Form, Select } from \"antd\";\r\nimport React, { memo, useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport sendRequest from \"../../../../modules/api/sendRequest\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nconst fetchManagersTabs = async () => {\r\n  let res = await sendRequest(\"managers/tabs\");\r\n  if (res?.data) return res.data\r\n};\r\n\r\nconst UseTabs = ({ dataIndex, title, inputRef, save }) => {\r\n\r\n  const onBlur = () => {\r\n    let inputType = 'select'\r\n    save(inputType)\r\n  };\r\n\r\n  const { data: managersList, isLoading, refetch } = useQuery([\"managers/tabs\"], fetchManagersTabs,{\r\n    enabled: false,\r\n  })\r\n\r\n  return (\r\n    <Form.Item\r\n      style={{\r\n        margin: 0,\r\n      }}\r\n      name={dataIndex}\r\n    >\r\n      <Select\r\n        allowClear\r\n        ref={inputRef}\r\n        lazyLoad\r\n        onBlur={onBlur}\r\n        loading={isLoading}\r\n        onFocus={refetch}\r\n      >\r\n        {managersList?.map((c, index) => {\r\n          return (\r\n            <Option key={c.cureTabId} value={JSON.stringify(c)}>\r\n              {c.cureTabName}\r\n            </Option>\r\n          );\r\n        })}\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default memo(UseTabs);\r\n","import { Form, Select } from 'antd';\r\nimport React, { memo } from 'react';\r\n\r\nconst { Option } = Select;\r\n\r\nconst CureTabType = ({ dataIndex, title, inputRef, save }) => {\r\n\r\n    const onBlur = () => {\r\n        let inputType = 'select'\r\n        save(inputType)\r\n    }\r\n\r\n    return (\r\n        <Form.Item\r\n            style={{\r\n                margin: 0,\r\n            }}\r\n            name={dataIndex}\r\n        >\r\n            <Select\r\n                allowClear\r\n                ref={inputRef}\r\n                lazyLoad\r\n                onBlur={onBlur}\r\n            >\r\n                <Option value=\"Tablet\">Tablet</Option>\r\n                <Option value=\"Ampoule\">Ampoule</Option>\r\n                <Option value=\"Drops\">Drops</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default memo(CureTabType);","import { Form, Input } from 'antd';\r\nimport React, { memo } from 'react';\r\n\r\nconst InputComponent = ({ dataIndex, title, inputRef, save }) => {\r\n    return (\r\n        <Form.Item\r\n            name={dataIndex}\r\n        >\r\n            <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default memo(InputComponent);","import React, { memo } from \"react\";\r\nimport UseTabs from \"./UseTabs\";\r\nimport CureTabType from \"./CureTabType\";\r\nimport InputComponent from \"./InputComponent\";\r\n\r\nconst EditInputType = (props) => {\r\n  const { dataIndex, title, inputRef, save, inputType } = props;\r\n  if (\r\n    dataIndex === \"useTabs\" ||\r\n    (dataIndex === \"cureTabName\" && inputType === \"select\")\r\n  ) {\r\n    return (\r\n      <UseTabs\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else if (dataIndex === \"cureTabType\" && inputType === 'select') {\r\n    return (\r\n      <CureTabType\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <InputComponent\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(EditInputType);\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport EditInputType from \"../components/EditInputType\";\r\n\r\nconst useChildrenNode = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    form,\r\n    inputType,\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const inputRef = useRef(null);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        if (setShowSaveButton) {\r\n            setShowSaveButton(true);\r\n        }\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async (inputType) => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            if (Object.keys(values).includes(\"useTabs\") && inputType === 'select') {\r\n                const manager = JSON.parse(values.useTabs);\r\n                values.useTabs = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            if (Object.keys(values).includes(\"cureTabName\")  && inputType === 'select') {\r\n                const manager = JSON.parse(values.cureTabName);\r\n                values.cureTabName = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log(\"Save failed:\", errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <EditInputType\r\n                dataIndex={dataIndex}\r\n                title={title}\r\n                inputRef={inputRef}\r\n                save={save}\r\n                inputType={inputType}\r\n            />\r\n        ) : (\r\n            <div\r\n                className=\"editable-cell-value-wrap\"\r\n                style={{\r\n                    paddingRight: 24,\r\n                    height: \"35px\",\r\n                }}\r\n                onClick={toggleEdit}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n    return { childNode };\r\n};\r\n\r\nexport default useChildrenNode;\r\n","import { Form, Table } from \"antd\";\r\nimport React, { memo, useContext } from \"react\";\r\nimport useChildrenNode from \"./modules/hooks/useChildrenNode\";\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    inputType,\r\n    ...restProps\r\n}) => {\r\n    const form = useContext(EditableContext);\r\n\r\n    const { childNode } = useChildrenNode({\r\n        title,\r\n        editable,\r\n        children,\r\n        dataIndex,\r\n        record,\r\n        handleSave,\r\n        setShowSaveButton,\r\n        inputType,\r\n        form,\r\n    });\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nconst EditTable = (props) => {\r\n    const {\r\n        dataSource,\r\n        setDataSource,\r\n        defaultColumns,\r\n        onChange,\r\n    } = props;\r\n\r\n    const handleSave = (row) => {\r\n        const newData = [...dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setDataSource(newData);\r\n        onChange?.()\r\n    };\r\n\r\n    const components = {\r\n        body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n        },\r\n    };\r\n    const columns = defaultColumns?.map((col) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                inputType: col.inputType,\r\n                handleSave,\r\n            }),\r\n        };\r\n    });\r\n    return (\r\n        <div>\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                rowClassName={() => \"editable-row\"}\r\n                components={components}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                pagination={false}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(EditTable);\r\n","import React, { memo } from 'react'\r\nimport { Form, Input } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport { useGlobalContext } from '../../../../../modules/context/index.js'\r\n\r\n\r\nfunction TreatmentFormBloke() {\r\n\r\n    const { treatmentHistoryForm } = useGlobalContext()\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                form={treatmentHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"Pre menopause\" name=\"preMenopause\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Description\" name=\"treatmentDesc\">\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={treatmentHistoryForm}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item label=\"Menopause\" name=\"menopause\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Recommendation\" name=\"recommendation\">\r\n                    <Input.TextArea showCount maxLength={3000} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Advise\" name=\"advise\">\r\n                    <Input.TextArea showCount maxLength={3000} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentFormBloke)","import React, { memo, useState } from 'react'\r\nimport { Button, DatePicker, Form, Input, InputNumber, Radio, Select, Space } from 'antd'\r\nimport { SimpleGrid } from '@chakra-ui/react'\r\nimport { useStore } from '../../../../../modules/store';\r\nimport dayjs from 'dayjs';\r\nimport { fetchPathologistsPlace } from '../../../../../modules/api';\r\nimport { useQuery } from 'react-query';\r\n\r\nfunction TreatmentTableFormBloke(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isBenign, setIsBenign] = useState(false)\r\n\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const setDataSourceTreatmentTable = useStore((store) => store.setDataSourceTreatmentTable)\r\n\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const onFinish = (values) => {\r\n        setIsFieldsChange(true)\r\n        try {\r\n            if (selectedRowKey) {\r\n                let newData = dataSourceTreatmentTable.map((i) => {\r\n                    if (i.id === values.id) {\r\n                        values.treatmentDate = dayjs(values.treatmentDate).format('YYYY-MM-DD HH:mm')\r\n                        return { ...values }\r\n\r\n                    }\r\n                    else return i\r\n                })\r\n                setDataSourceTreatmentTable(newData)\r\n            } else {\r\n                let id = new Date().getTime()\r\n                values.id = id\r\n                values.key = id\r\n                values.treatmentDate = dayjs(values.treatmentDate).format('YYYY-MM-DD HH:mm')\r\n                setDataSourceTreatmentTable([...dataSourceTreatmentTable, values])\r\n            }\r\n            form.resetFields()\r\n            setSelectedRowKey()\r\n        } catch (error) {\r\n            console.log('%c error', 'background: red; color: dark', error);\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        form.resetFields()\r\n        setSelectedRowKey()\r\n    }\r\n\r\n    const onFieldsChange = ([{ name, value }]) => {\r\n        const nameFormInput = name && name[0]\r\n        if (nameFormInput === 'treatmentTypeName') setIsBenign(value === 'benign')\r\n    }\r\n\r\n    const { data: pathologistsList } = useQuery([\"managers/pathologists\"], fetchPathologistsPlace)\r\n\r\n    return (\r\n\r\n        <SimpleGrid columns={['1', '2']} gap='1' >\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='treatmentTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n            >\r\n\r\n                <Form.Item hidden name='id'>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Date\" name=\"treatmentDate\">\r\n                    <DatePicker\r\n                        format=\"YYYY-MM-DD HH:mm\"\r\n                        defaultValue={dayjs()}\r\n                        showTime\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Urgent Histology\"\r\n                    name=\"histologyUrgent\"\r\n                >\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Histology Final\"\r\n                    name=\"histologyFinal\"\r\n                >\r\n                    <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                </Form.Item>\r\n\r\n                {isBenign ? '' : (\r\n                    <>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                        >\r\n                            {({ getFieldValue }) => getFieldValue('treatmentTypeName') !== 'benign' ? (\r\n                                <Form.Item label=\"SLNB\" name=\"SLNB\">\r\n                                    <Radio.Group>\r\n                                        <Radio value={1}>Yes</Radio>\r\n                                        <Radio value={2}>No</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                            ) : ''\r\n                            }\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) => prevValues.SLNB !== currentValues.SLNB}\r\n                        >\r\n                            {({ getFieldValue }) =>\r\n                                getFieldValue('SLNB') === 1 ? (\r\n                                    <>\r\n                                        <Form.Item\r\n                                            label=\"Reactive\"\r\n                                            name=\"slnbReactive\"\r\n                                        >\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n\r\n                                        <Form.Item label=\"MTS\" name=\"slnbMts\">\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n                                    </>\r\n                                ) : ''}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Axilla dissection\"\r\n                            name=\"axillaDesection\"\r\n                        >\r\n                            <Radio.Group>\r\n                                <Radio value={1}>Yes</Radio>\r\n                                <Radio value={2}>No</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) => prevValues.axillaDesection !== currentValues.axillaDesection}\r\n                        >\r\n                            {({ getFieldValue }) =>\r\n                                getFieldValue('axillaDesection') === 1 ? (\r\n                                    <>\r\n                                        <Form.Item\r\n                                            label=\"Reactive\"\r\n                                            name=\"axillaDesectionReactive\"\r\n                                        >\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n\r\n                                        <Form.Item label=\"MTS\" name=\"axillaDesectionMts\">\r\n                                            <InputNumber\r\n                                                min={0}\r\n                                                defaultValue={0}\r\n                                            />\r\n                                        </Form.Item>\r\n                                    </>\r\n                                ) : ''}\r\n                        </Form.Item>\r\n\r\n                    </>\r\n\r\n                )}\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                onFinish={onFinish}\r\n                id='treatmentTableFormBlok'\r\n                form={form}\r\n                labelWrap\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                style={{\r\n                    maxWidth: 600,\r\n                }}\r\n                onFieldsChange={onFieldsChange}\r\n            >\r\n\r\n                <Form.Item label=\"ER\" >\r\n                    <Form.Item noStyle name=\"ihkEr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkEr !== currentValues.ihkEr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkEr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"erN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"PR\" >\r\n                    <Form.Item noStyle name=\"ihkPr\">\r\n                        <Radio.Group>\r\n                            <Space direction=\"vertical\">\r\n                                <Radio value={1}>Positive</Radio>\r\n                                <Radio value={2}>Negative</Radio>\r\n                            </Space>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.ihkPr !== currentValues.ihkPr}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('ihkPr') === 1) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"prN\">\r\n                                        <InputNumber />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else return ''\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"HER2\" >\r\n                    <Form.Item noStyle name=\"her2\">\r\n                        <InputNumber\r\n                            min={0}\r\n                            max={3}\r\n                            defaultValue={0}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        noStyle\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.her2 !== currentValues.her2}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            if (getFieldValue('her2') === 2) {\r\n                                return (\r\n                                    <Form.Item noStyle name=\"her2FT\">\r\n                                        <InputNumber addonBefore=\"FT\" />\r\n                                    </Form.Item>\r\n                                )\r\n                            } else {\r\n                                form.setFieldValue?.({ her2FT: '' })\r\n                                return ''\r\n                            }\r\n                        }}\r\n                    </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"K67\" name=\"k67\">\r\n                    <InputNumber min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n                    <Select\r\n                        allowClear\r\n                    >\r\n                        {pathologistsList?.map((i) => {\r\n                            return (\r\n                                <Select.Option key={i.pathologistId} value={i.pathologistName}>\r\n                                    {i.pathologistName}\r\n                                </Select.Option>\r\n                            );\r\n                        })}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item label=\"Brest type\" name=\"breastType\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"Missing\">Missing</Select.Option>\r\n                        <Select.Option value=\"Right\">Right</Select.Option>\r\n                        <Select.Option value=\"Left\">Left</Select.Option>\r\n                        <Select.Option value=\"Both\">Both</Select.Option>\r\n                        <Select.Option value=\"Post mastectomy right\">Post mastectomy right</Select.Option>\r\n                        <Select.Option value=\"Post mastectomy left\">Post mastectomy left</Select.Option>\r\n                        <Select.Option value=\"Axilla right\">Axilla right</Select.Option>\r\n                        <Select.Option value=\"Axilla left\">Axilla left</Select.Option>\r\n                        <Select.Option value=\"Extra breast right\">Extra breast right</Select.Option>\r\n                        <Select.Option value=\"Extra breast left\">Extra breast left</Select.Option>\r\n                        <Select.Option value=\"Both extra breasts\">Both extra breasts</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Type of treatment\" name=\"treatmentTypeName\">\r\n                    <Select allowClear>\r\n                        <Select.Option value=\"benign\">Benign</Select.Option>\r\n                        <Select.Option value=\"malign\">Malignant</Select.Option>\r\n                        <Select.Option value=\"Nak\">Nak</Select.Option>\r\n                        <Select.Option value=\"AK\">AK</Select.Option>\r\n                        <Select.Option value=\"RT\">RT</Select.Option>\r\n                        <Select.Option value=\"target\">Target</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') === 'malign' ? (\r\n                            <>\r\n                                <Form.Item label=\"Əməliyyat növü\" name=\"treatmentSubType\">\r\n                                    <Select allowClear>\r\n                                        <Select.Option value=\"Organgoruyucu\">Organoprotector</Select.Option>\r\n                                        <Select.Option value=\"Masektamiya\">Masectomy</Select.Option>\r\n                                        <Select.Option value=\"SLNB\">SLNB</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item label=\"TB\" name=\"treatmentSubSubType\">\r\n                                    <Select allowClear>\r\n                                        <Select.Option value=\"lumA\">Lum A</Select.Option>\r\n                                        <Select.Option value=\"lumB\">Lum B</Select.Option>\r\n                                        <Select.Option value=\"tripleN\">Triple negative</Select.Option>\r\n                                        <Select.Option value=\"hormoneP\">Hormone positive Her positive</Select.Option>\r\n                                        <Select.Option value=\"hormoneN\">Hormone negative Her positive</Select.Option>\r\n                                        <Select.Option value=\"prN\">PR negative</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            </>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') === 'benign' ? (\r\n                            <>\r\n                                <Form.Item label=\"Alt növ\" name=\"treatmentSubType\">\r\n                                    <Select allowClear>\r\n                                        <Select.Option value=\"lumpektamiya\">Lumpectamia</Select.Option>\r\n                                        <Select.Option value=\"reduksiya\">Reduction</Select.Option>\r\n                                        <Select.Option value=\"mastopeksiya\">Mastopexy</Select.Option>\r\n                                        <Select.Option value=\"augumentasiya\">Augmentation</Select.Option>\r\n                                        <Select.Option value=\"Extra breast\">Extra breast</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item label=\"Alt alt növ\" name=\"treatmentSubSubType\">\r\n                                    <Select allowClear >\r\n                                        <Select.Option value=\"right\">Right</Select.Option>\r\n                                        <Select.Option value=\"left\">Left</Select.Option>\r\n                                        <Select.Option value=\"both\">Both</Select.Option>\r\n                                        <Select.Option value=\"sectoral\">Sectoral</Select.Option>\r\n                                        <Select.Option value=\"sectoral round block\">\r\n                                            Sectoral round block\r\n                                        </Select.Option>\r\n                                        <Select.Option value=\"expander\">Expander</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            </>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') === 'Nak' || getFieldValue('treatmentTypeName') === 'RT' ? (\r\n                            <Form.Item label=\"patamarfoz\" name=\"treatmentSubType\">\r\n                                <Select allowClear>\r\n                                    <Select.Option value=\"1\">&#8544;</Select.Option>\r\n                                    <Select.Option value=\"2\">&#8545;</Select.Option>\r\n                                    <Select.Option value=\"3\">&#8546;</Select.Option>\r\n                                    <Select.Option value=\"4\">&#8547;</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    noStyle\r\n                    shouldUpdate={(prevValues, currentValues) => prevValues.treatmentTypeName !== currentValues.treatmentTypeName}\r\n                >\r\n                    {({ getFieldValue }) =>\r\n                        getFieldValue('treatmentTypeName') ? (\r\n                            <Form.Item label=\"Description\" name=\"treatmentTypeDesc\">\r\n                                <Input.TextArea showCount maxLength={3000} rows={3} />\r\n                            </Form.Item>\r\n                        ) : ''}\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Space>\r\n\r\n                        <Button\r\n                            form='treatmentTableFormBlok'\r\n                            htmlType='submit'\r\n                            type=\"primary\"\r\n                        >\r\n                            {selectedRowKey ? 'Edit' : 'Add'}\r\n                        </Button>\r\n\r\n                        <Button onClick={handleClear} danger>{selectedRowKey ? \"Close\" : \"Clear\"}</Button>\r\n\r\n\r\n                    </Space>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentTableFormBloke)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteTreatmentTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteTreatmentTableRow)","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction TreatmentTableTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const treatmentTableTableSetting = useLocalStorageStore((store) => store.treatmentTableTableSetting)\r\n    const setTreatmentTableTableSetting = useLocalStorageStore((store) => store.setTreatmentTableTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(treatmentTableTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setTreatmentTableTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setTreatmentTableTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = treatmentTableTableSetting\r\n            ? treatmentTableTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [treatmentTableTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentTableTableSetting)","import { Box, Flex, useMediaQuery } from '@chakra-ui/react'\r\nimport { Table, Tooltip } from 'antd'\r\nimport React, { memo, useMemo } from 'react'\r\nimport DeleteTreatmentTableRow from '../DeleteTreatmentTableRow';\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport TreatmentTableTableSetting from './TreatmentTableTableSetting';\r\nimport dayjs from 'dayjs';\r\n\r\nfunction TreatmentTable(props) {\r\n\r\n    const { selectedRowKey, setSelectedRowKey, form } = props\r\n\r\n    const [isLargerThan400] = useMediaQuery('(min-width: 400px)')\r\n\r\n    const treatmentTableTableSetting = useLocalStorageStore((store) => store.treatmentTableTableSetting)\r\n\r\n    const dataSourceTreatmentTable = useStore((store) => store.dataSourceTreatmentTable)\r\n    const setDataSourceTreatmentTable = useStore((store) => store.setDataSourceTreatmentTable)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return treatmentTableTableSetting?.find(i => i.dataIndex === dataIndex) ? treatmentTableTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const onRowTable = (record, index) => {\r\n        const {\r\n            treatmentDate,\r\n            erN,\r\n            prN,\r\n            SLNB,\r\n            slnbReactive,\r\n            slnbMts,\r\n            axillaDesection,\r\n            axillaDesectionReactive,\r\n            axillaDesectionMts,\r\n        } = record\r\n\r\n        const SLNB_Value = SLNB ? SLNB : slnbReactive || slnbMts ? 1 : 2 \r\n\r\n        const axillaDesectionValue = axillaDesection ? axillaDesection : axillaDesectionReactive || axillaDesectionMts ? 1 : 2 \r\n\r\n        form.setFieldsValue({\r\n            ...record,\r\n            SLNB: SLNB_Value,\r\n            axillaDesection: axillaDesectionValue,\r\n            treatmentDate: dayjs(treatmentDate),\r\n            ihkEr: erN ? 1 : 2,\r\n            ihkPr: prN ? 1 : 2,\r\n        })\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"treatmentDate\",\r\n                key: \"treatmentDate\",\r\n                isVisible: visible('treatmentDate'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Brest type\",\r\n                dataIndex: \"breastType\",\r\n                key: \"breastType\",\r\n                isVisible: visible('breastType'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Treatment type\",\r\n                dataIndex: \"treatmentTypeName\",\r\n                key: \"treatmentTypeName\",\r\n                isVisible: visible('treatmentTypeName'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub type\",\r\n                dataIndex: \"treatmentSubType\",\r\n                key: \"treatmentSubType\",\r\n                isVisible: visible('treatmentSubType'),\r\n                ellipsis: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Sub sub type\",\r\n                dataIndex: \"treatmentSubSubType\",\r\n                key: \"treatmentSubSubType\",\r\n                isVisible: visible('treatmentSubSubType'),\r\n                ellipsis: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"treatmentTypeDesc\",\r\n                key: \"treatmentTypeDesc\",\r\n                isVisible: visible('treatmentTypeDesc'),\r\n                ellipsis: true,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"ihkEr\",\r\n                key: \"ihkEr\",\r\n                isVisible: visible('ihkEr'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"ihkPr\",\r\n                key: \"ihkPr\",\r\n                isVisible: visible('ihkPr'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => {\r\n                    if (value) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>Positive</Box>\r\n                                <Box ml='2' color='blue.400' fontWeight='semibold'>{value}</Box>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return \"Negative\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n                isVisible: visible('her2'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value, row) => {\r\n                    if (+value === 2) {\r\n                        return (\r\n                            <Flex justifyContent='space-between' pr='2' >\r\n                                <Box>{value}</Box>\r\n                                <Flex>\r\n                                    <Box>FT:</Box>\r\n                                    <Box ml='2' color='blue.400' fontWeight='semibold'>{row.her2FT}</Box>\r\n                                </Flex>\r\n                            </Flex>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <Tooltip placement=\"topLeft\" title={value}>\r\n                                {value}\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n                isVisible: visible('k67'),\r\n                ellipsis: true,\r\n                width: isLargerThan400 ? false : 150,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        setIsFieldsChange(true)\r\n                        let newData = dataSourceTreatmentTable.filter(i => i.id !== row.id)\r\n                        setDataSourceTreatmentTable(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteTreatmentTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [isLargerThan400, treatmentTableTableSetting, dataSourceTreatmentTable]);\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Box alignSelf='flex-end'>\r\n                <TreatmentTableTableSetting columns={columns} />\r\n            </Box>\r\n\r\n            <Table\r\n                size='small'\r\n                bordered\r\n                scroll={{\r\n                    x: window.innerHeight\r\n                }}\r\n                pagination={false}\r\n                columns={columns.filter(i => i.isVisible === true)}\r\n                dataSource={dataSourceTreatmentTable}\r\n                rowClassName={(record, index) =>\r\n                    selectedRowKey === index + 1 ? 'ant-table-row-selected' : ''\r\n                }\r\n                onRow={(record, index) => ({\r\n                    onClick: (e) => {\r\n                        onRowTable(record, index)\r\n                        setSelectedRowKey(index + 1)\r\n                    },\r\n                })}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentTable)","import React, { memo } from 'react'\r\nimport DeleteTableRow from '../../../../../components/DeleteTableRow'\r\n\r\nfunction DeleteTreatmentMedicationsTableRow({handleDelete}) {\r\n  return (\r\n    <DeleteTableRow onClick={handleDelete}/>\r\n  )\r\n}\r\n\r\nexport default memo(DeleteTreatmentMedicationsTableRow)","// src/text.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */ jsx(\n    chakra.p,\n    {\n      ref,\n      className: cx(\"chakra-text\", props.className),\n      ...aliasedProps,\n      ...rest,\n      __css: styles\n    }\n  );\n});\nText.displayName = \"Text\";\n\nexport {\n  Text\n};\n","import React, { memo, useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox } from 'antd';\r\nimport { useLocalStorageStore } from '../../../../../modules/store';\r\nimport { deepCopy } from '../../../../../modules/functions/deepCopy';\r\nimport TableSetting from '../../../../../components/TableSetting';\r\n\r\nfunction TreatmentMedicationsTableSetting({ columns }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const treatmentMedicationsTableSetting = useLocalStorageStore((store) => store.treatmentMedicationsTableSetting)\r\n    const setTreatmentMedicationsTableSetting = useLocalStorageStore((store) => store.setTreatmentMedicationsTableSetting)\r\n\r\n    const onChangeCheckbox = (e) => {\r\n        let dataIndex = e.target.id\r\n        let isVisible = e.target.checked\r\n        const copyCTS = deepCopy(treatmentMedicationsTableSetting)\r\n        copyCTS.forEach(i => {\r\n            if (i.dataIndex === dataIndex) {\r\n                i.isVisible = isVisible\r\n            }\r\n        })\r\n        setTreatmentMedicationsTableSetting([...copyCTS])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colArr = columns.map(({ key, dataIndex, isVisible, title }) => ({ key, dataIndex, isVisible, title }))\r\n        setTreatmentMedicationsTableSetting(colArr)\r\n    }, [])\r\n\r\n    const items = useMemo(() => {\r\n        const arr = treatmentMedicationsTableSetting\r\n            ? treatmentMedicationsTableSetting?.map(i => (\r\n                {\r\n                    label: <Checkbox\r\n                        id={i?.dataIndex}\r\n                        onChange={onChangeCheckbox}\r\n                        defaultChecked={i?.isVisible}\r\n                    >\r\n                        {i.title}\r\n                    </Checkbox>\r\n                }\r\n            ))\r\n            : []\r\n        return arr\r\n    }, [treatmentMedicationsTableSetting])\r\n\r\n    const onOpenChange = (e) => {\r\n        setIsOpen(e)\r\n    }\r\n\r\n    return (\r\n        <TableSetting\r\n            items={items}\r\n            isOpen={isOpen}\r\n            onOpenChange={onOpenChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentMedicationsTableSetting)","import React, { memo, useMemo, useState } from 'react'\r\nimport EditTableComponent from '../../../../../components/EditTableComponent'\r\nimport { useLocalStorageStore, useStore } from '../../../../../modules/store';\r\nimport { Button, Tooltip } from 'antd';\r\nimport DeleteTreatmentMedicationsTableRow from '../DeleteTreatmentMedicationsTableRow';\r\nimport { Box, Flex, Spacer, Text } from '@chakra-ui/react';\r\nimport TreatmentMedicationsTableSetting from './TreatmentMedicationsTableSetting';\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport dayjs from 'dayjs';\r\n\r\nfunction TreatmentMedicationsTable() {\r\n\r\n    const recipeList = useStore((store) => store.recipeList)\r\n    const setRecipeList = useStore((store) => store.setRecipeList)\r\n    const setIsFieldsChange = useStore((store) => store.setIsFieldsChange)\r\n\r\n\r\n    const treatmentMedicationsTableSetting = useLocalStorageStore((store) => store.treatmentMedicationsTableSetting)\r\n\r\n    const visible = (dataIndex, defaultVisible = true) => {\r\n        return treatmentMedicationsTableSetting?.find(i => i.dataIndex === dataIndex) ? treatmentMedicationsTableSetting.find(i => i.dataIndex === dataIndex).isVisible : defaultVisible\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n                isVisible: visible('date'),\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Name\",\r\n                dataIndex: \"cureTabName\",\r\n                key: \"cureTabName\",\r\n                isVisible: visible('cureTabName'),\r\n                inputType: 'select',\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Type\",\r\n                dataIndex: \"cureTabType\",\r\n                key: \"cureTabType\",\r\n                isVisible: visible('cureTabType'),\r\n                inputType: 'select',\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Mg/Ml\",\r\n                dataIndex: \"cureTabDose\",\r\n                key: \"cureTabDose\",\r\n                isVisible: visible('cureTabDose'),\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Usage guide\",\r\n                dataIndex: \"cureTabUsing\",\r\n                key: \"cureTabUsing\",\r\n                isVisible: visible('cureTabUsing'),\r\n                ellipsis: true,\r\n                editable: true,\r\n                width: 200,\r\n                render: (value) => (\r\n                    <Tooltip placement=\"topLeft\" title={value}>\r\n                        {value}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delete\",\r\n                dataIndex: \"delete\",\r\n                width: 50,\r\n                key: \"delete\",\r\n                isVisible: visible('delete'),\r\n                ellipsis: true,\r\n                align: 'center',\r\n                render: (value, row, index) => {\r\n                    const handleDelete = () => {\r\n                        setIsFieldsChange(true)\r\n                        let newData = recipeList.filter(i => i.Id !== row.Id)\r\n                        setRecipeList(newData)\r\n                    }\r\n                    return (\r\n                        <DeleteTreatmentMedicationsTableRow handleDelete={handleDelete} />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [treatmentMedicationsTableSetting, recipeList]);\r\n\r\n\r\n    const onClickNewRecipe = () => {\r\n        let key = new Date().getTime()\r\n        let Id = new Date().getTime()\r\n        let newData = { key, Id, date: dayjs().format(\"DD-MM-YYYY\") };\r\n        setRecipeList([...recipeList, newData]);\r\n    };\r\n\r\n    return (\r\n        <Box display='flex' flexDirection='column'>\r\n\r\n            <Flex m='2'>\r\n                <Text fontSize='20' fontWeight='600' >Medications</Text>\r\n\r\n                <Spacer />\r\n\r\n                <TreatmentMedicationsTableSetting columns={columns} />\r\n            </Flex>\r\n\r\n            <EditTableComponent\r\n                dataSource={recipeList}\r\n                setDataSource={setRecipeList}\r\n                defaultColumns={columns.filter(i => i.isVisible === true)}\r\n            />\r\n\r\n            <Button block icon={<PlusOutlined />} onClick={onClickNewRecipe}>\r\n                New medications\r\n            </Button>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default memo(TreatmentMedicationsTable)","import { Box } from '@chakra-ui/react'\r\nimport React, { memo, useState } from 'react'\r\nimport ProfilePatientForm from '../../components/ProfilePatientForm'\r\nimport TreatmentFormBloke from './modules/components/TreatmentFormBloke'\r\nimport TreatmentTableFormBloke from './modules/components/TreatmentTableFormBloke'\r\nimport TreatmentTable from './modules/components/TreatmentTable'\r\nimport TreatmentMedicationsTable from './modules/components/TreatmentMedicationsTable'\r\nimport { Form } from 'antd'\r\n\r\nfunction Treatment() {\r\n\r\n  const [selectedRowKey, setSelectedRowKey] = useState();\r\n\r\n  const [form] = Form.useForm()\r\n\r\n  return (\r\n    <>\r\n      <ProfilePatientForm />\r\n\r\n      <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n        <TreatmentFormBloke />\r\n\r\n      </Box>\r\n\r\n      <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n        <Box p='2' my='2' border='1px solid pink' borderRadius='15px' bg={selectedRowKey ? 'blue.50' : ''}>\r\n\r\n          <TreatmentTableFormBloke selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n        </Box>\r\n\r\n        <Box p='2' my='2' border='1px solid pink' borderRadius='15px'>\r\n\r\n          <TreatmentTable selectedRowKey={selectedRowKey} setSelectedRowKey={setSelectedRowKey} form={form} />\r\n\r\n        </Box>\r\n\r\n      </Box>\r\n\r\n      <Box p='2' my='2' boxShadow='xl' bg='pink.50' borderRadius='15px'>\r\n\r\n        <TreatmentMedicationsTable />\r\n\r\n      </Box>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(Treatment)","// This icon file is generated automatically.\nvar PlusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z\" } }] }, \"name\": \"plus\", \"theme\": \"outlined\" };\nexport default PlusOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar PlusOutlined = function PlusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusOutlinedSvg\n  }));\n};\nPlusOutlined.displayName = 'PlusOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlusOutlined);","// src/spacer.tsx\nimport { chakra } from \"@chakra-ui/system\";\nvar Spacer = chakra(\"div\", {\n  baseStyle: {\n    flex: 1,\n    justifySelf: \"stretch\",\n    alignSelf: \"stretch\"\n  }\n});\nSpacer.displayName = \"Spacer\";\n\nexport {\n  Spacer\n};\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["Option","Select","fetchManagersTabs","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","sendRequest","sent","data","abrupt","stop","apply","arguments","UseTabs","_ref2","dataIndex","inputRef","title","save","_useQuery","useQuery","enabled","managersList","isLoading","refetch","_jsx","Form","style","margin","name","children","allowClear","ref","lazyLoad","onBlur","loading","onFocus","map","c","index","value","JSON","stringify","cureTabName","cureTabId","memo","CureTabType","_jsxs","InputComponent","Input","onPressEnter","EditInputType","props","inputType","editable","record","handleSave","setShowSaveButton","form","_useState","useState","_useState2","_slicedToArray","editing","setEditing","useRef","useEffect","current","focus","toggleEdit","setFieldsValue","_defineProperty","values","manager","_manager","validateFields","Object","keys","includes","parse","useTabs","cureTabType","_objectSpread","t0","console","log","_x","childNode","className","paddingRight","height","onClick","EditableContext","React","EditableRow","_objectWithoutProperties","_excluded","_Form$useForm","component","Provider","EditableCell","restProps","_excluded2","useContext","useChildrenNode","EditTable","dataSource","setDataSource","defaultColumns","onChange","row","newData","_toConsumableArray","findIndex","item","key","splice","components","body","cell","columns","col","onCell","Table","size","bordered","scroll","x","window","innerHeight","rowClassName","pagination","TreatmentFormBloke","treatmentHistoryForm","useGlobalContext","SimpleGrid","gap","labelWrap","labelAlign","labelCol","span","wrapperCol","maxWidth","label","showCount","maxLength","rows","TreatmentTableFormBloke","selectedRowKey","setSelectedRowKey","isBenign","setIsBenign","dataSourceTreatmentTable","useStore","store","setDataSourceTreatmentTable","setIsFieldsChange","onFinish","i","id","treatmentDate","dayjs","format","Date","getTime","concat","resetFields","error","pathologistsList","fetchPathologistsPlace","hidden","DatePicker","defaultValue","showTime","_Fragment","noStyle","shouldUpdate","prevValues","currentValues","treatmentTypeName","_ref3","getFieldValue","Radio","SLNB","_ref4","InputNumber","min","axillaDesection","_ref5","onFieldsChange","_ref2$","Space","direction","ihkEr","_ref6","ihkPr","_ref7","max","her2","_ref8","_form$setFieldValue","addonBefore","setFieldValue","call","her2FT","pathologistName","pathologistId","_ref9","_ref10","_ref11","_ref12","Button","htmlType","type","danger","DeleteTreatmentTableRow","handleDelete","DeleteTableRow","TreatmentTableTableSetting","isOpen","setIsOpen","treatmentTableTableSetting","useLocalStorageStore","setTreatmentTableTableSetting","onChangeCheckbox","e","target","isVisible","checked","copyCTS","deepCopy","forEach","colArr","items","useMemo","Checkbox","defaultChecked","TableSetting","onOpenChange","TreatmentTable","_useMediaQuery","useMediaQuery","isLargerThan400","visible","defaultVisible","length","undefined","find","ellipsis","width","render","Tooltip","placement","Flex","justifyContent","pr","Box","ml","color","fontWeight","align","filter","display","flexDirection","alignSelf","onRow","erN","prN","slnbReactive","slnbMts","axillaDesectionReactive","axillaDesectionMts","SLNB_Value","axillaDesectionValue","onRowTable","DeleteTreatmentMedicationsTableRow","Text","forwardRef","styles","useStyleConfig","_omitThemingProps","omitThemingProps","rest","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","jsx","chakra","cx","__css","displayName","TreatmentMedicationsTableSetting","treatmentMedicationsTableSetting","setTreatmentMedicationsTableSetting","TreatmentMedicationsTable","recipeList","setRecipeList","Id","m","fontSize","Spacer","EditTableComponent","block","icon","PlusOutlined","date","Treatment","ProfilePatientForm","p","my","boxShadow","bg","borderRadius","border","AntdIcon","PlusOutlinedSvg","baseStyle","flex","justifySelf","object","clone","assign"],"sourceRoot":""}